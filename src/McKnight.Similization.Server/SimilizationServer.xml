<?xml version="1.0"?>
<doc>
    <assembly>
        <name>McKnight.Similization.Server</name>
    </assembly>
    <members>
        <member name="T:McKnight.Similization.Server.AICity">
            <summary>
            Represents a city owned by an AI opponent.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AICity"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICity.#ctor(System.Drawing.Point,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AICity"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="parentCountry"></param>
        </member>
        <member name="M:McKnight.Similization.Server.AICity.#ctor(System.Drawing.Point,McKnight.Similization.Server.Country,McKnight.Similization.Server.City)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AICity"/> class.  This constructor is
             useful when the programmer needs to convert a regular <see cref="T:McKnight.Similization.Server.City"/> to an 
             <see cref="T:McKnight.Similization.Server.AICity"/> (e.g. when an AI opponent captures a human players' city.).
            </summary>
            <param name="coordinates"></param>
            <param name="parentCountry"></param>
            <param name="capturedCity"></param>
        </member>
        <member name="M:McKnight.Similization.Server.AICity.OnImprovementBuilt(McKnight.Similization.Server.ImprovementBuiltEventArgs)">
            <summary>
            Fires the <i>ImprovementBuilt</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:McKnight.Similization.Server.AICity.PrimaryNeed">
            <summary>
            Gets the primary need of the city.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICity.DoTurn">
            <summary>
            Takes a turn for the AI City.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.AICountry">
            <summary>
            A computer controlled country.  These countries will have the AI determine next moves,
            barganing decisions, and all game controlled aspects.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AICountry"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.#ctor(McKnight.Similization.Core.Civilization,System.String,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AICountry"/> class.
            </summary>
            <param name="civilization"></param>
            <param name="leaderName"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.DoTurn">
            <summary>
            Takes a turn for the AI Country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.RequestAudience(McKnight.Similization.Server.Country)">
            <summary>
            Requests an audience with the AI Country.
            </summary>
            <param name="requester">The country requesting the audience.</param>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.NotifyOfInvasion(McKnight.Similization.Server.Unit,McKnight.Similization.Server.GridCell)">
            <summary>
            Notifies the <c>AICountry</c> that a unit has invaded their territory.
            </summary>
            <param name="invader">The <c>Unit</c> that has invaded the territory of 
            the <c>AICountry</c>.</param>
            <param name="location">The <c>GridCell</c> that was invaded.</param>
            <remarks>The <c>AICountry</c> will not always respond to such an invasion, 
            especially if the invader has a right of passage treaty with the AI Country.  
            However, if the two countries have diplomatic ties, the host country will 
            usually issue a warning to the invader.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.UpdateResourceHashtable">
            <summary>
            Refreshes the internal hashtable of resources for the AI country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.DoTurnBasedNegotiations">
            <summary>
            This function looks for negotiation options per turn
            for the AI country.  This includes trade proposals, 
            threats to foreign colonies, and requests for peace treaties.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.DoPeacetimeNegotiation(McKnight.Similization.Server.Country)">
            <summary>
            Does peacetime negotations with the foreign country passed in.
            </summary>
            <param name="foreignCountry"></param>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.DoWartimeNegotiation(McKnight.Similization.Server.Country)">
            <summary>
            Does any needed wartime negotiation.  Calling this function 
            will not neccessairily result in wartime negotiation, it depends
            on country types, country needs, etc...
            </summary>
            <param name="foreignCountry">The foreign colony to negotiate with</param>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.ProposeTrade(System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable},System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable},McKnight.Similization.Server.Country)">
            <summary>
            Propose a trade with a foreign country.  The foreign country will
            examine the items they are giving up, and the items they are 
            receiving, and determine a response.
            </summary>        
            <param name="givenItems"></param>
            <param name="takenItems"></param>
            <param name="foreignCountry"></param>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.AICountry.Strategy">
            <summary>
            Gets the Strategy that the AI Country is currently using.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.AICountry.StrategyChanged">
            <summary>
            Occurs when the strategy of the opponent changes.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AICountry.OnStrategyChanged(McKnight.Similization.Server.StrategyChangedEventArgs)">
            <summary>
            Fires the <i>StrategyChanged</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:McKnight.Similization.Server.AISettler">
            <summary>
            Represents a settler for a computer opponent.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AISettler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AISettler"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AISettler.#ctor(System.Drawing.Point,McKnight.Similization.Core.UnitBase)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AISettler"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="unitClone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.AISettler.DoTurn">
            <summary>
            Takes a turn for the AI Settler.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AISettler.Settle(System.String)">
            <summary>
            Settles a new city.  This will create a new city (with the 
            given name), and remove the settler from the map.
            </summary>
            <param name="cityName">The name of the city to create.</param>
            <returns>A <c>City</c> object for the city just created.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.AISettler.IsSuitableCityLocation">
            <summary>
            Determines whether the current position of the 
            <see cref="T:McKnight.Similization.Server.AISettler"/> is considered suitable for building a city.
            </summary>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.AIStrategy">
            <summary>
            Represents a strategy used by the AI.  This is the base class for
            all of the strategies that the AI uses.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIStrategy.#ctor">
            <summary>
            Initializes a new instance of the <c>AIStrategy</c> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIStrategy.Invoke(McKnight.Similization.Server.AICity)">
            <summary>
            Invokes the AI strategy on the Similization item
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIStrategy.Invoke(McKnight.Similization.Server.AIUnit)">
            <summary>
            Invokes the AI strategy on the Similization item
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIStrategy.OnTradeProposed(System.Object,McKnight.Similization.Server.TradeProposedEventArgs)">
            <summary>
            Event handler for the <i>TradeProposed</i> event of the foreign colony
            using the strategy.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.AIStrategy.OnImprovementBuilt(System.Object,McKnight.Similization.Server.ImprovementBuiltEventArgs)">
            <summary>
            Event handler for the <c>ImprovementBuilt</c> event of the city belonging
            to the foreign colony using the strategy.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:McKnight.Similization.Server.AIUnit">
            <summary>
            Class representing an artifical intelligence unit.  These are units
            used by computer opponents.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIUnit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AIUnit"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIUnit.#ctor(System.Drawing.Point,McKnight.Similization.Core.UnitBase)">
            <summary>
            Intializes a new instance of the <see cref="T:McKnight.Similization.Server.AIUnit"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="clone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.AIUnit.DoTurn">
            <summary>
            Takes a turn for the AI unit.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIUnit.GetCoordinatesToExplore">
            <summary>
            Gets the cell to explore for the AI unit.
            </summary>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.AIUnit.CurrentBattleCountry">
             <summary>
            Gets the country that the AI opponent is currently battling. 
             </summary>
        </member>
        <member name="P:McKnight.Similization.Server.AIUnit.CurrentBattleCity">
            <summary>
            Gets the city that the AI unit is currently attacking.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.AIUnit.CurrentBattleUnit">
            <summary>
            Gets the unit that the AI unit is currently attacking.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.AIUnit.Mode">
            <summary>
            Gets the mode of the unit.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.AIUnitMode">
            <summary>
            Different modes an AI unit can be in.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.AIUnitMode.Attack">
            <summary>
            The unit is currently attacking, or trying to attack 
            another unit.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.AIUnitMode.Defend">
            <summary>
            The unit is currently taking defensive positions.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.AIUnitMode.Pillage">
            <summary>
            The unit is pillaging or trying to pillage a cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.AIUnitMode.Explore">
            <summary>
            The unit is exploring territory.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.AIWorker">
            <summary>
            Represents an AI Worker.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIWorker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AIWorker"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AIWorker.#ctor(McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AIWorker"/> class.
            </summary>
            <param name="unitClone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.AIWorker.#ctor(System.Drawing.Point,McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.AIWorker"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="unitClone"></param>
        </member>
        <member name="T:McKnight.Similization.Server.Barbarian">
            <summary>
            A barbarian is an AI unit that does not have a parent 
            country, and just attacks anything close.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Barbarian.#ctor(System.Drawing.Point,McKnight.Similization.Core.UnitBase)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Barbarian"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="clone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Barbarian.DoTurn">
            <summary>
            Takes a turn for the barbarian.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.BarbarianGoody">
            <summary>
            Represents an unfriendly barbarian that was in the village.  
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.BarbarianGoody.#ctor(System.String,McKnight.Similization.Server.Barbarian)">
            <summary>
            Initializes a new instance of the <c>BarbarianGoody</c> class.
            </summary>
            <param name="tribeName"></param>
            <param name="enemy"></param>
        </member>
        <member name="P:McKnight.Similization.Server.BarbarianGoody.Barbarian">
            <summary>
            Gets the barbarian that was unleashed.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.BombardmentResult">
            <summary>
            Enumeration representing various results from an attempt
            bombarding an enemy.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BombardmentResult.SucceededDestroyingCellImprovement">
            <summary>
            The bombardment was successfull, and improvements were destroyed.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BombardmentResult.SucceededDestroyingCityImprovement">
            <summary>
            The city bombardment was successfull, and a city improvement was destroyed.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BombardmentResult.SucceededInjuredUnit">
            <summary>
            The bombardment was successfull, and units were injured.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BombardmentResult.SucceededKilledCitizens">
            <summary>
            The bombardment was successfull, and citizens of the city were killed.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BombardmentResult.Failed">
            <summary>
            The bombardment failed.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BombardmentResult.AttackerKilled">
            <summary>
            The bombardment failed, and the attacking unit was killed 
            in the process.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.BuildStrategy">
            <summary>
            Represents a strategy for the AI where the AI will work on building 
            new buildings for their cities and improving the surrounding landscape.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.BuildStrategy.#ctor(McKnight.Similization.Server.AICountry)">
            <summary>
            Initializes a new instance of the <c>BuildStrategy</c> class.
            </summary>
            <param name="foreignCountry"></param>
        </member>
        <member name="M:McKnight.Similization.Server.BuildStrategy.OnTradeProposed(System.Object,McKnight.Similization.Server.TradeProposedEventArgs)">
            <summary>
            Event handler for a trade proposed to the country using this strategy.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.BuildStrategy.OnImprovementBuilt(System.Object,McKnight.Similization.Server.ImprovementBuiltEventArgs)">
            <summary>
            Event handler for an improvement being built in a city belonging to the country
            using this strategy.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:McKnight.Similization.Server.CellImprovementDestroyedEventArgs">
            <summary>
            Event Arguments for the <c>CellImprovementDestroyed</c> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.CellImprovementDestroyedEventArgs.#ctor(McKnight.Similization.Server.GridCell,McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <c>CellImprovementDestroyedEventArgs</c> class.
            </summary>
            <param name="cell"></param>
            <param name="destroyedBy"></param>
        </member>
        <member name="P:McKnight.Similization.Server.CellImprovementDestroyedEventArgs.Cell">
            <summary>
            The <c>GridCell</c> that had an improvement destroyed.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.CellImprovementDestroyedEventArgs.DestroyedBy">
            <summary>
            The <c>Unit</c> that destroyed the improvement.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.CitizensKilledEventArgs">
            <summary>
            Event Arguments for the <c>CitizensKilled</c> event of a <c>City</c>.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.CitizensKilledEventArgs.#ctor(McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <c>CitizensKilledEventArgs</c> class.
            </summary>
            <param name="attackingCountry"></param>
        </member>
        <member name="P:McKnight.Similization.Server.CitizensKilledEventArgs.AttackingCountry">
            <summary>
            The <c>Country</c> responsible for killing the City's citizens.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.City">
            <summary>
            Represents a city in the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.City"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.#ctor(System.Drawing.Point,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.City"/> class.
            </summary>
            <param name="coordinates">The <see cref="T:McKnight.Similization.Server.GridCell"/> the City should be located on.</param>
            <param name="parentCountry">The <see cref="T:McKnight.Similization.Server.Country"/> that is building the city.</param>
        </member>
        <member name="M:McKnight.Similization.Server.City.#ctor(System.Drawing.Point,McKnight.Similization.Server.Country,McKnight.Similization.Server.AICity)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.City"/> class.
            </summary>
            <remarks>
            This constructor is useful when the programmer needs to 
            convert an AICity to a regular City, perhaps when a human 
            player captures an AI City (AI Cities will break when underneath 
            human players).
            </remarks>
            <param name="coordinates"></param>
            <param name="parentCountry"></param>
            <param name="capturedCity"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.CalculateValueForCountry(McKnight.Similization.Core.CountryBase)">
            <summary>
            Calculates the value of the <see cref="T:McKnight.Similization.Server.City"/> to the specified <see cref="T:McKnight.Similization.Server.Country"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.City.AddCoordinatesToCityRadius(System.Drawing.Point)">
            <summary>
            Adds the GridCell to the cities influence radius.  Once a
            cell is inside city radius, the city can take advantage 
            of food, commerce, and resources that the cell contains.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.ChangeParentCountry(McKnight.Similization.Server.Country)">
            Changes the country that control the city.  This is useful for city captures 
            and also useful for cities that choose to change countries based on culture.
        </member>
        <member name="P:McKnight.Similization.Server.City.GoldPerTurn">
            <summary>
            Gets the amount of gold generated each turn by the city.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.City.ShieldsPerTurn">
            <summary>
            Gets the number of shields per turn produced by the city.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.City.FoodPerTurn">
            <summary>
            Gets the amount of food produced by the city each turn.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.City.BinSize">
            <summary>
            Gets the size of the food bins for the city.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.City.TurnsUntilGrowth">
            <summary>
            Gets the number of turns before the city will grow in population.
            </summary>
            <remarks>This property returns an <i>estimate</i> of the number of 
            turns before the <see cref="T:McKnight.Similization.Server.City"/> grows in size.  This estimate is based 
            on the amount of food currently in the bins, and the amount of food 
            currently being produced per turn.  The accuracy of this estimate is
            dependant on those two factors being consistent.</remarks>
        </member>
        <member name="P:McKnight.Similization.Server.City.ResearchPerTurn">
            <summary>
            Gets the number of research units produced by the city each turn.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.City.TurnsUntilComplete">
            <summary>
            Gets the number of turns before the improvement the city is 
            building is finished.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.BombardPopulation(McKnight.Similization.Server.Country)">
            <summary>
            Bombards and kills 1 population point of the city's population.
            </summary>
            <param name="attacker"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.DestroyImprovement(McKnight.Similization.Core.Improvement,McKnight.Similization.Server.Country)">
            <summary>
            Destorys the specified improvement.
            </summary>
            <param name="destroyedImprovement"></param>
            <param name="attacker"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.HasWorkerInFields">
            <summary>
            Gets a value indicating whether or not there is a worker unit in 
            the city radius.
            </summary>
            <returns><c>true</c> if there is a worker in the fields, <c>false</c> otherwise</returns>
            <remarks>To be considered "in the fields", a worker must be in one of the cells
            directly available to the city.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.City.Capture(McKnight.Similization.Server.Unit)">
            <summary>
            Attempts to capture the city.
            </summary>
            <param name="foreignUnit"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.UpgradeUnit(McKnight.Similization.Server.Unit)">
            <summary>
            Upgrades the unit to the best upgradable unit.
            </summary>
            <param name="unit"></param>
        </member>
        <member name="E:McKnight.Similization.Server.City.CitizensKilled">
            <summary>
            Occurs when an attacking country kills a portion of the
            city's population.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnCitizensKilled(McKnight.Similization.Server.CitizensKilledEventArgs)">
            <summary>
            Raises the <i>CitizensKilled</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.City.ImprovementBuilt">
            <summary>
            Event that fires whenever a new improvement is built by the city.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnImprovementBuilt(McKnight.Similization.Server.ImprovementBuiltEventArgs)">
            <summary>
            Raises the <i>ImprovementBuilt</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.City.ImprovementDestroyed">
            <summary>
            Occurs when an <see cref="T:McKnight.Similization.Core.Improvement"/> within the <see cref="T:McKnight.Similization.Server.City"/> is destroyed.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnImprovementDestroyed(McKnight.Similization.Server.ImprovementDestroyedEventArgs)">
            <summary>
            Raises the <i>ImprovementDestroyed</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnCityStatusChanged(McKnight.Similization.Server.CityStatusEventArgs)">
            <summary>
            Fires the <i>CityStatusChanged</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.City.CityStatusChanged">
            <summary>
            Event that fires whenever the status of the city changes.  
            </summary>
            <remarks>Status changes happen when the balance of happiness and
            unhappiness is changed.  Cities with a larger percentage of unhappy people 
            will tend to be in disorder, and happier citizens will result in orderly 
            cities (or even celebrations).</remarks>
        </member>
        <member name="E:McKnight.Similization.Server.City.CulturalInfluenceExpanded">
            <summary>
            Event that fires whenever the cultural influence of the
            city expands.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnCulturalInfluenceExpanded">
            <summary>
            Fires the <i>CulturalInfluenceExpanded</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.City.TurnStarted">
            <summary>
            Event that fires whenever a turn has begun for a city.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnTurnStarted">
            <summary>
            Fires the <i>TurnStarted</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.City.Starved">
            <summary>
            Event that fires whenever the city experiences starvation.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnStarved">
            <summary>
            Raises the <i>Starved</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.City.CannotGrow">
            <summary>
            Event that fires whenever the city is attempting to 
            grow past its' maximum size.  This happens when a city
            requires an improvement to allow growth past its' current
            size.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnCannotGrow(McKnight.Similization.Server.CannotGrowEventArgs)">
            <summary>
            Fires the <i>CannotGrow</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.City.Captured">
            <summary>
            Event that fires whenever the city is captured.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnCaptured(McKnight.Similization.Server.CapturedEventArgs)">
            <summary>
            Fires the <i>Captured</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.City.DisorderStarted">
            <summary>
            Event that fires whenever a city is thrown into disorder.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnDisorderStarted">
            <summary>
            Fires the <i>DisorderStarted</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.City.PollutionCreated">
            <summary>
            Event that fires whenever pollution is created near the city.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnPollutionCreated(McKnight.Similization.Server.PollutionEventArgs)">
            <summary>
            Fires the <i>PollutionCreated</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnPopulationChanged">
            <summary>
            Fires the <i>PopulationChanged</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.City.GrowthNeededForUnit">
            <summary>
            Event that fires when a population-reducing unit is being built, but 
            is stopped by the fact that the population is insufficient and the population 
            is not growing.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.OnGrowthNeededForUnit">
            <summary>
            Fires the <i>GrowthNeededForUnit</i> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.RetrieveWorkItem">
            <summary>
            Gets a <see cref="T:McKnight.Similization.Server.WorkerActionInfo"/> object representing any work that needs 
            to be done around the city.
            </summary>
            <returns>A <see cref="T:McKnight.Similization.Server.WorkerActionInfo"/> object with information regarding the
            priority, location, and action to perform.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.City.GetBuildableItemForNeed(McKnight.Similization.Server.AICityNeed,System.Type)">
            <summary>
            Gets the most appropriate item for a city to build, based on the type of improvement 
            and the need of a city.
            </summary>
            <param name="need"></param>
            <param name="improvementType"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.City.CalcCityDefense">
            <summary>
            Gets the total number of defense points in the city.
            </summary>
            <returns></returns>
            <remarks>The total number of defense points is the sum of all defense points
            for each of the defensive units in the city.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.City.UnitMerge(McKnight.Similization.Server.Unit)">
            <summary>
            Makes the unit merge with the city.
            </summary>
            <param name="unit"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.DoTurn">
            <summary>
            Takes a turn for the city.  This function will update the food, shields, gold,
            and other information about the city.  It also handles the cases when an improvement
            is built, or a unit is trained. 
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.SabotageProduction">
            <summary>
            Sabotages the production of whatever is currently being produced.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.IsLosingFood">
            <summary>
            Gets a value indicating whether or not the city is currently losing food
            each turn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.City.UpdateAvailableFood">
            <summary>
            Updates the amount of food in the city food bins.  This
            takes into account how much food the city currently has,
            how much will be produced during the turn, and how much
            will be eaten during the turn.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.ApplyCellEffects">
            <summary>
            Applys positive and negative effects that the surrounding
            cells will have.  This includes shields, gold, and food.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.SellImprovement(McKnight.Similization.Core.Improvement)">
            <summary>
            Sells the improvement located in the city.  The city will
            get a certain percentage of money spent building the improvement, 
            however, any positive (or negative) effects the improvement had
            on the city will be removed.
            </summary>
            <param name="improvement"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the city information.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.Load(System.Xml.XmlReader)">
            <summary>
            Loads the city information.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:McKnight.Similization.Server.City.IncrementCulturePtsForTurn">
            <summary>
            Calculates the number of culture points generated during the 
            current turn for the city.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.City.UpdatePollution">
            <summary>
            Recalculates the number of pollution points in the city and determines if (and where) 
            pollution will appear during this turn.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.City.GetNonPollutedCell">
            <summary>
            Gets a random non-polluted cell around the city.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.City.HasAccessToResource(McKnight.Similization.Core.Resource)">
            <summary>
            Returns <i>true</i> if the city has access to a certain resource.
            </summary>
            <param name="resource">The resource to check access to.</param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.City.GetNextImprovement">
            <summary>
            Gets the next item for the city to build.  This could be a unit
            or an improvement (or even a wonder).
            </summary>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.CityGoody">
            <summary>
            Represents a village "goody" that contains a new city that will join
            the country finding the village.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.CityGoody.#ctor(System.String,McKnight.Similization.Server.City)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.CityGoody"/> class.
            </summary>
            <param name="tribeName"></param>
            <param name="newCity"></param>
        </member>
        <member name="M:McKnight.Similization.Server.CityGoody.ApplyGoody(McKnight.Similization.Server.Country)">
            <summary>
            Adds the new city to the countries city list.
            </summary>
            <param name="goodyOwner"></param>
        </member>
        <member name="P:McKnight.Similization.Server.CityGoody.City">
            <summary>
            Gets the city that was found in the village.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.ClientSaveGameInfo">
            <summary>
            Represents client-side information that needs to be saved along with the rest of the save-game info.
            </summary>
            <remarks>Information contianed within the <c>ClientSaveGameInfo</c> class does not exist 
            on the server during gameplay.  For example, the cell that is currently focused on the client
            needs to be saved so that when the game is loaded the user starts at the same point.</remarks>
        </member>
        <member name="P:McKnight.Similization.Server.ClientSaveGameInfo.CenterCell">
            <summary>
            Gets or sets the <c>GridCell</c> that should be displayed in the 
            center of the screen the next time this game is loaded.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ClientSaveGameInfo.Country">
            <summary>
            Gets or sets the country that is information refers to.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.Country">
            <summary>
            Represents a country in the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Country"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.#ctor(McKnight.Similization.Core.Civilization,System.String,System.Drawing.Point)">
            <summary>
            Intializes a new instance of the <see cref="T:McKnight.Similization.Server.Country"/> class.
            </summary>
            <param name="civilization"></param>
            <param name="leaderName"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.AddFirstSettler(System.Drawing.Point)">
            <summary>
            Adds the first settler to the game at the coordinates specified.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.DoTurn">
            <summary>
            Takes a turn for the country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.IncrementScore">
            <summary>
            Increments the score for the country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.StartRevolution(McKnight.Similization.Core.Government)">
            <summary>
            Starts a revolution, trying to change to the specified <see cref="T:McKnight.Similization.Core.Government"/>.
            </summary>
            <param name="desiredGovernment"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CanInvokeTradeEmbargoWith(McKnight.Similization.Server.Country)">
            <summary>
            Determines whether the <see cref="T:McKnight.Similization.Server.Country"/> can create 
            a trade embargo against other countries.
            </summary>
            <remarks>To be able to have a trade embargo, a country 
            must have sucessfully researched the proper technologies, and
            must have an embassy.</remarks>
        </member>
        <member name="P:McKnight.Similization.Server.Country.CapitalCity">
            <summary>
            The <see cref="T:McKnight.Similization.Server.City"/> that is acting as the capital for the 
            <see cref="T:McKnight.Similization.Server.Country"/>.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Country.DiplomaticTies">
            <summary>
            Gets a list of all the diplomatic ties a country has.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Country.Cities">
            <summary>
            Gets a list of all the cities belonging to the country.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Country.AudienceRequested">
            <summary>
            Occurs when a foreign leader requests an audience with this country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnAudienceRequested(McKnight.Similization.Server.AudienceRequestedEventArgs)">
            <summary>
            Fires the <i>AudienceRequested</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.Country.Defeated">
            <summary>
            Event that fires when the country has been militarily defeated.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnDefeated(McKnight.Similization.Server.DefeatedEventArgs)">
            <summary>
            Fires the <i>Defeated</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Country.NewGovernmentAvailable">
            <summary>
            Occurs when a new government becomes available to the country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnNewGovernmentAvailable(McKnight.Similization.Server.GovernmentAvailableEventArgs)">
            <summary>
            Fires the <i>NewGovernmentAvailable</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.Country.ResearchDirectionNeeded">
            <summary>
            Event that fires whenever the wise men of the country need direction
            on what technology to research next.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnResearchDirectionNeeded">
            <summary>
            Fires the <i>ResearchDirectionNeeded</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Country.RevolutionStarted">
            <summary>
            Event that fires whenever a revolution has started in the Country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnRevolutionStarted">
            <summary>
            Fires the <i>RevolutionStarted</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Country.RevolutionEnded">
            <summary>
            Occurs when a revolution has ended.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnRevolutionEnded(McKnight.Similization.Server.RevolutionEndedEventArgs)">
            <summary>
            Fires the <i>RevolutionEnded</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Country.Started">
            <summary>
            Occurs when the country starts its' first turn in the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnStarted">
            <summary>
            Fires the <i>Started</i> event.
            </summary>		
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnTradeProposed(McKnight.Similization.Server.TradeProposedEventArgs)">
            <summary>
            Fires the <i>TradeProposed</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.Country.TradeProposed">
            <summary>
            Occurs when another player proposes a trade.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Country.TurnFinished">
            <summary>
            Occurs when a country has reached the end of its' turn.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnTurnFinished">
            <summary>
            Fires the <i>TurnFinished</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Country.WarDeclared">
            <summary>
            Occurs when war has been declared with another <see cref="T:McKnight.Similization.Server.Country"/>.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnWarDeclared(McKnight.Similization.Server.WarDeclaredEventArgs)">
            <summary>
            Fires the <see cref="E:McKnight.Similization.Server.Country.WarDeclared"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.RequestAudience(McKnight.Similization.Server.Country,System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable},System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable})">
            <summary>
            Requests an audience with the country.
            </summary>
            <param name="requester">The <c>Country</c> that is requesting an audience.</param>
            <param name="givenItems"></param>
            <param name="takenItems"></param>
            <remarks>A request for an audience can be either accepted or rejected by 
            the asked party.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.Country.RequestAudience(McKnight.Similization.Server.Country)">
            <summary>
            Requests an audience with the country.
            </summary>
            <param name="requester"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.InvokeMutualProtectionPact(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Invokes the <see cref="T:McKnight.Similization.Server.MutualProtectionPact"/> between this <see cref="T:McKnight.Similization.Server.Country"/> and 
            the <see cref="T:McKnight.Similization.Server.Country"/> passed as the <i>friend</i> parameter.  
            </summary>
            <param name="friend"></param>
            <param name="enemy"></param>
            <remarks>Invoking the <see cref="T:McKnight.Similization.Server.MutualProtectionPact"/> will cause this <see cref="T:McKnight.Similization.Server.Country"/> to
            start a war against <i>enemy</i>.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.Country.IsFoeOf(McKnight.Similization.Server.Country)">
            <summary>
            Gets a value indicating if the other country is considered a foe.
            </summary>
            <param name="foreignCountry"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.IsFriendOf(McKnight.Similization.Server.Country)">
            <summary>
            Gets a value indicating whether or not the other country is considered a friend.
            </summary>
            <param name="foreignCountry"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.EstablishDiplomaticTie(McKnight.Similization.Server.Country)">
            <summary>
            Establishes a diplomatic tie with the foreign country.
            </summary>
            <param name="foreignCountry"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.EstablishEmbassy(McKnight.Similization.Server.Country)">
            <summary>
            Establishes an embassy with the foreign country.  This 
            allows investigating cities, stealing technologies, and
            contacting leaders.
            </summary>
            <param name="foreignCountry"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.GetDiplomaticTie(McKnight.Similization.Server.Country)">
            <summary>
            Gets the diplomatic tie that has been established with the 
            foreign country.
            </summary>
            <param name="foreignCountry">The country the tie has been established with</param>
            <remarks>If no diplomatic tie has been established with the foreign country, 
            a <i>null</i> value will be returned.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CaptureSpy(McKnight.Similization.Server.DiplomaticTie,McKnight.Similization.Server.EspionageAction,System.Boolean,McKnight.Similization.Server.City)">
            <summary>
            Captures a spy from the <see cref="T:McKnight.Similization.Server.Country"/> within the <see cref="T:McKnight.Similization.Server.DiplomaticTie"/>.
            </summary>
            <param name="diplomaticTie"></param>
            <param name="espionageAction"></param>
            <param name="espionageCompleted"></param>
            <param name="city"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CreateNewCityName">
            <summary>
            Gets a city name for the colony.  Useful in situations where the player 
            is creating a new city and you want to give them a suggestion.  Also useful
            for AI opponents.
            </summary>
            <returns>A <c>string</c> representation of the city name.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.DeclareWar(McKnight.Similization.Server.Country)">
            <summary>
            Declares war on the specified country.
            </summary>
            <param name="enemy"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.DisbandUnit(McKnight.Similization.Server.Unit)">
            <summary>
            Disbands the unit passed into the function.
            </summary>
            <param name="unit">The unit to disband.</param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.GetPlunderedAmountForCity(McKnight.Similization.Server.City)">
            <summary>
            Gets the amount of gold that would be plundered if the city in the
            parameter was invaded by a foreign enemy.
            </summary>
            <param name="plunderedCity"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.ProposeTrade(System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable},System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable},McKnight.Similization.Server.Country)">
            <summary>
            Proposes a trade to the foreign country with items on each side of the table.
            </summary>
            <param name="givenItems"></param>
            <param name="takenItems"></param>
            <param name="foreignCountry"></param>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.Country.PercentageDoneResearching">
            <summary>
            Gets the percentage ( 1 - 100% ) done researching
            the next technology.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateIncomePerTurnFromCities">
            <summary>
            Gets the amount of gold per turn generated from all the cities 
            belonging to the country.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateIncomePerTurnFromTaxmen">
            <summary>
            Gets the amount of gold generated each turn by the tax collectors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateTotalIncomePerTurn">
            <summary>
            Gets the (estimated) gold per turn produced by this country.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateScienceExpensePerTurn">
            <summary>
            Gets the amount of money the country spends on science per turn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateEntertainmentExpensePerTurn">
            <summary>
            Gets the amount of money the country spends on entertainment per turn
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateNumberOfFreeUnitsAllowed">
            <summary>
            Gets the total number of units allowed for free, given the current population of the 
            country.
            </summary>
            <returns>A <see cref="T:System.Int32"/> representing the number of free units allowed.</returns>
            <remarks>A negative number indicates that <i>all</i> units are free, regardless of 
            country population.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateTotalUnitExpensePerTurn">
            <summary>
            Gets the amount of money the country spends on units per turn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateMaintenanceExpensePerTurn">
            <summary>
            Gets the amount of money the country spends on maintenance costs per turn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateCorruptionExpensePerTurn">
            <summary>
            Gets the amount of money that is lost to corruption per turn for the country.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateTotalExpensePerTurn">
            <summary>
            Gets the total amount of money, per turn, that the country spends.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateNetProfitPerTurn">
            <summary>
            Gets the total profit, pet turn, that the country makes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.CalculateTurnsUntilTechnologyAdvance">
            <summary>
            Gets the number of turns until the country gets its next 
            technology advance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Country.GetCulturalPerception(McKnight.Similization.Server.Country)">
            <summary>
            Gets the cultural perception of the foreign country toward this country.
            </summary>
            <param name="foreignCountry"></param>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.Country.UnitActivatedOnTurn">
            <summary>
            Gets or sets a value indicating if at least 1 unit was active
            during the past turn of the game.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Country.MutualProtectionPactInvoked">
            <summary>
            Occurs when a <see cref="T:McKnight.Similization.Server.MutualProtectionPact"/> this country has with an ally 
            is invoked by the ally.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnMutualProtectionPactInvoked(McKnight.Similization.Server.MutualProtectionPactEventArgs)">
            <summary>
            Fires the <i>MutualProtectionPactInvoked</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.Country.SpyCaptured">
            <summary>
            Occurs when this <see cref="T:McKnight.Similization.Server.Country"/> captured a foreign spy.
            </summary>
            <remarks>For more information, see the <see cref="T:McKnight.Similization.Server.SpyCapturedEventArgs"/> class.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.Country.OnSpyCaptured(McKnight.Similization.Server.SpyCapturedEventArgs)">
            <summary>
            Fires the <i>SpyCaptured</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the Country information.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.Load(System.Xml.XmlReader)">
            <summary>
            Loads the Country from the xml stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Country.UpdateResearchableTechnologies">
            <summary>
            Rebuilds the internal list of researchable technoliges
            for the colony.  This list is based on technologies that
            have not been acquired, but have all the technological
            requirements met.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.UpdateAvailableGovernments">
            <summary>
            Refreshes the internal list of available governments based upon 
            the technologies that the country has researched.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Country.UpdateAvailableResources">
            <summary>
            Refreshes
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.CountryFactory">
            <summary>
            Class responsible for creating instance of <see cref="T:McKnight.Similization.Server.Country"/> classes 
            from xml metadata.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.CountryFactory.CreateCountry(System.Xml.XmlReader)">
            <summary>
            Gets the correct subclass of a <see cref="T:McKnight.Similization.Server.Country"/> object.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.CountryFactory.CreateCountry(McKnight.Similization.Core.Civilization,System.String,System.Boolean,System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:McKnight.Similization.Server.Country"/> with the specified parameters.
            </summary>
            <param name="civilization"></param>
            <param name="leaderName"></param>
            <param name="isAIPlayer"></param>
            <param name="playerColor"></param>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.DiplomaticTie">
            <summary>
            Represents a diplomatic tie between two governments.  
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.DiplomaticTie"/> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="foreignCountry"></param>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticTie.CurrentTrades">
            <summary>
            Gets a list of trades between the two countries.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticTie.Attitude">
            <summary>
            Gets the attitude of the foreign country toward the parent country.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticTie.ParentCountry">
            <summary>
            Gets the owner of the <see cref="T:McKnight.Similization.Server.DiplomaticTie"/>.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticTie.ForeignCountry">
            <summary>
            Gets the foreign country in the tie.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticTie.HasEmbassy">
            <summary>
            Gets or sets a value indicating whether or not there is an embassy established 
            in the foreign country.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticTie.HasSpy">
            <summary>
            Determines whether the parent country has a spy in the embassy 
            of the country declared in the <i>ForeignCountry</i> property.
            </summary>
            <remarks>This property is read-only.  To attempt to add a spy, 
            call the <i>PlantSpy</i> method.</remarks>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticTie.DiplomaticState">
            <summary>
            Gets the official diplomatic state of the two countries.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticTie.DiplomaticAgreements">
            <summary>
            Gets a list of diplomatic agreements in the diplomatic tie.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.StealTechnology">
            <summary>
            Attempts to steal a random technolgy from the foreign country. 
            </summary>				
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.InvestigateCity(McKnight.Similization.Server.City)">
            <summary>
            Attempts to investigate a city in the foreign country.
            </summary>
            <param name="foreignCity"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.PlantSpy">
            <summary>
            Attempts to plant a spy within the foreign country.  
            </summary>
            <remarks>
            There's a 50% chance this will succeed.  If it fails, however, 
            the foreign country will immediately become furious with your
            country.  If it succeeds, your spy can sabotage production and
            spread propaganda.</remarks>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.Sabotage(McKnight.Similization.Server.City)">
            <summary>
            Attempt to sabotage the current production item in the foreign city.
            This can only take place if there is a spy within the foreign country.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.SpreadPropaganda(McKnight.Similization.Server.City)">
            <summary>
            Attempts to get a foreign city to defect to the parent country by
            spreading propaganda.  Cities in anarchy are immune to proaganda.
            </summary>
            <param name="foreignCity"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.StealPlans">
            <summary>
            If successful, Stealing foreign plans will reveal the positions
            of all the foreign colonys' military units.
            </summary>
            <remarks>Unlike other espionage activities, when stealing plans 
            from enemy countries, failure always means the spy is caught.</remarks>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.StealWorldMap">
            <summary>
            Attempt to steal the world map of the foreign colony.
            If this is successfull, all the territory the rival 
            colony has explored will become visible to the parent 
            colony.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.ExposeSpy">
            <summary>
            Attempts to expose a spy in the embassy.
            </summary>
            <returns></returns>
        </member>
        <member name="E:McKnight.Similization.Server.DiplomaticTie.DiplomaticStateChanged">
            <summary>
            Occurs when the <i>DiplomaticState</i> property changes.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticTie.OnDiplomaticStateChanged">
            <summary>
            Fires the <i>DiplomaticStateChanged</i> event.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.DiplomaticAgreement">
            <summary>
            Base class for all diplomatic agreements.  This class
            cannot be directly created.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticAgreement.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <c>DiplomaticAgreement</c> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="allyCountry"></param>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticAgreement.Country1">
            <summary>
            The first country in the agreement.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticAgreement.Country2">
            <summary>
            The second country in the agreement.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticAgreement.TurnsLeft">
            <summary>
            The number of turns left in the agreement.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DiplomaticAgreement.CanPeacefullyCancel">
            <summary>
            Gets or sets a bool indicating whether or not the 
            agreement can be peacefully canceled.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.DiplomaticAgreement.CalculateValueForCountry(McKnight.Similization.Core.CountryBase)">
            <summary>
            Calculates the value of the <see cref="T:McKnight.Similization.Server.DiplomaticAgreement"/> to the 
            specified <see cref="T:McKnight.Similization.Server.Country"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.EmptyGoody">
            <summary>
            Represents and empty goody.  Villages that are abandoned will 
            have this as a goody. 
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.EmptyGoody.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.EmptyGoody"/> class.
            </summary>
            <param name="tribeName"></param>
        </member>
        <member name="T:McKnight.Similization.Server.CulturalPerception">
            <summary>
            Possible ways an AI player can percieve the culture of another player.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CulturalPerception.InAwe">
            <summary>
            The AI player is in awe of the culture of the other player.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CulturalPerception.Admirer">
            <summary>
            The AI player admires the culture of the other player.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CulturalPerception.Impressed">
            <summary>
            The AI player is impressed by the culture of the other player.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CulturalPerception.Unimpressed">
            <summary>
            The AI player is unimpressed by the culture of the other player.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CulturalPerception.Dismissive">
            <summary>
            The AI player is dismissive of the culture of the other player.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CulturalPerception.Disdainful">
            <summary>
            The AI player is disdainful of the culture of the other player.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.StolenTechnologyResult">
            <summary>
            Possible results from trying to steal a technology.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.StolenTechnologyResult.Success">
            <summary>
            Successfully stole the technology.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.StolenTechnologyResult.Failure">
            <summary>
            Failed to steal the technology.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.StolenTechnologyResult.NoEmbassyEstablished">
            <summary>
            Could not attempt to steal the technology because
            no embassy has been established.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.EspionageResult">
            <summary>
            Possible results from try to perform espionage on another country.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageResult.Success">
            <summary>
            Successfully performed espionage.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageResult.SuccessWithCapturedSpy">
            <summary>
            Successfully performed the espionage, but our spy was caught in the process.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageResult.Failure">
            <summary>
            Failed to perform espionage.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageResult.SpyCaught">
            <summary>
            The spy who tried to perform the espionage was caught, and the mission failed.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageResult.ImmuneToEspionage">
            <summary>
            Could not perform espionage.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.DiplomaticState">
            <summary>
            Possible diplomatic states between two countries.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.DiplomaticState.Peace">
            <summary>
            The two countries are at peace.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.DiplomaticState.War">
            <summary>
            The two countries are at war.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.BarbarianAggressiveness">
            <summary>
            Determines how aggresive barbarians will be in the game.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BarbarianAggressiveness.Sedentary">
            <summary>
            Sedentary.  Barbarians will not attack at all.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BarbarianAggressiveness.Roaming">
            <summary>
            Roaming.  Barbarians will wander randomly, but not attack without provocation.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BarbarianAggressiveness.Restless">
            <summary>
            Restless.  Barbarians will roam and be somewhat agressive.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BarbarianAggressiveness.Raging">
            <summary>
            Raging.  Barbarians will hunt out other countries and aggresively fight them.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BarbarianAggressiveness.Random">
            <summary>
            Random.  The AI will pick a random setting for the aggresiveness.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.MoveResult">
            <summary>
            Possible results from having a unit move to a new cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.MoveResult.MoveSuccess">
            <summary>
            successfully moved to the desired cell
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.MoveResult.UnreachableTerrain">
             <summary>
            Unable to move to cell because the land type is unreachable by this unit
             </summary>
        </member>
        <member name="F:McKnight.Similization.Server.MoveResult.Killed">
            <summary>
            killed in combat
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.MoveResult.CellTaken">
             <summary>
            the destination cell is taken by a non-foe
             </summary>
        </member>
        <member name="F:McKnight.Similization.Server.MoveResult.UnresolvedCombat">
            <summary>
            there was an enemy in the cell, and
            combat was unresolved after the turn.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.MoveResult.NoMovesLeft">
            <summary>
            the unit does not have any moves left,
            and thefore cannot move to the requested
            cell.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.CombatResult">
            <summary>
            Possible results from entering into combat with another unit.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CombatResult.Win">
            <summary>
            The unit wins the fight.  The other unit is destroyed.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CombatResult.Killed">
            <summary>
            The unit is killed.  
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CombatResult.Capture">
            <summary>
            The unit is captures the other unit.  
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.CombatResult.Unresolved">
            <summary>
            The fight is unresolved this turn.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.UnitStatus">
            <summary>
            Possible states a unit can be in.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.UnitStatus.Active">
            <summary>
            The unit is active.  It will take a turn.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.UnitStatus.Fortified">
            <summary>
            The unit is fortified.  It will be skipped during the turn unit 
            it is activated.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.UnitStatus.AutoMove">
            <summary>
            The unit is on automove.  The computer will move the unit 
            automatically.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.UnitStatus.Sentry">
            <summary>
            The unit is in sentry.  It will remain positioned, but if an 
            enemy unit apporoaches within 1 square, the unit will become active.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.WorkerStatus">
            <summary>
            Possible things a worker can be doing
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerStatus.Idle">
            <summary>
            The worker is not doing anything.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerStatus.Mining">
            <summary>
            The worker is building a new mine.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerStatus.BuildingRoad">
            <summary>
            The worker is building a road.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerStatus.Irrigating">
            <summary>
            The worker is irrigating the land.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerStatus.CleaningPollution">
            <summary>
            The worker is cleaning pollution.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerStatus.BuildingRailroad">
            <summary>
            The worker is building a railroad.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerStatus.ClearingJungle">
            <summary>
            The worker is clearing the jungle.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerStatus.ClearingForest">
            <summary>
            The worker is deforesting the area.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.VillageEntryResult">
            <summary>
            Different results from entering a village.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VillageEntryResult.Deserted">
            <summary>
            The village was desterted.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VillageEntryResult.Attack">
            <summary>
            The village contained barbarians who attacked the entering unit.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VillageEntryResult.Gold">
            <summary>
            The village contained gold.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VillageEntryResult.Advance">
            <summary>
            The village gave the units' parent colony a technology advance.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VillageEntryResult.MilitaryUnit">
            <summary>
            The village contained a military unit who joined the colony.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VillageEntryResult.Settler">
            <summary>
            The village contained a settler unit who joined the colony.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VillageEntryResult.NewCity">
            <summary>
            The village contained a city that joined the colony.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.BorderTypes">
            <summary>
            Describes which side of the grid cell borders 
            a different country.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BorderTypes.None">
            <summary>
            There is no border in the cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BorderTypes.Top">
            <summary>
            The top (north) side of the grid cell is a border.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BorderTypes.Bottom">
            <summary>
            The bottom (southern) side of the grid cell is a border.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BorderTypes.Left">
            <summary>
            The left (western) side of the grid cell is a border.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.BorderTypes.Right">
            <summary>
            The right (eastern) side of the grid cell is a border.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.AICityNeed">
            <summary>
            Different types of things a city can need.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.AICityNeed.UnitDefense">
            <summary>
            The city is vunerable.  It needs defending.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.AICityNeed.Culture">
            <summary>
            The city needs more culture.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.AICityNeed.Commerce">
            <summary>
            There needs to be more cash flowing through the city.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.AICityNeed.Food">
            <summary>
            There needs to be more food in the city.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.WorkerAction">
            <summary>
            Different things a worker can do.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerAction.None">
            <summary>
            No Action
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerAction.Irrigate">
            <summary>
            Irrigate the cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerAction.CleanPollution">
            <summary>
            Clean any pollution that might be in the cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerAction.BuildRoad">
            <summary>
            Build a road in the cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerAction.BuildRailroad">
            <summary>
            Build a railroad in the cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerAction.Mine">
            <summary>
            Mine the cell for gold.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.WorkerAction.BuildFortress">
            <summary>
            Build a fortress in the cell.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.VictoryType">
            <summary>
            Different types of victories in the game
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VictoryType.MilitaryVictory">
            <summary>
            Represents a Military Victory.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VictoryType.DiplomaticVictory">
            <summary>
            Represents a Diplomatic Victory.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VictoryType.CulturalVictory">
            <summary>
            Represents a Cultural Victory.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VictoryType.DominationVictory">
            <summary>
            Represents a Domination Victory.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.VictoryType.SpaceVictory">
            <summary>
            Represents a Space Victory.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.EspionageAction">
            <summary>
            Enumeration for different classes of espionage.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageAction.StealTechnology">
            <summary>
            Espionage where one country tries to steal a technology 
            from another country.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageAction.PlantDisease">
            <summary>
            Espionage where one country tries to plant a disease in 
            the city of another country.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageAction.ExposeSpy">
            <summary>
            Espionage where one country tries to expose and send back the 
            spy from another country.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageAction.PlantSpy">
            <summary>
            Espionage where one country tries to plant a spy in the capital 
            of another country.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageAction.SpreadPropaganda">
            <summary>
            Espionage where one country tries to convert the citizens to their 
            civilization through the spreading of propaganda.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageAction.SabotageProduction">
            <summary>
            Espionage where one country tries to sabotage the production of the 
            current unit, improvement, or wonder in a particular city of another 
            country.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.EspionageAction.StealPlans">
            <summary>
            Espionage where one country tries to steal the military plans of another 
            country.
            </summary>        
        </member>
        <member name="F:McKnight.Similization.Server.EspionageAction.StealWorldMap">
            <summary>
            Espionage where one country tries to steal the world map of another country.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.CannotGrowEventArgs">
            <summary>
            Event Arguments for the <i>CannotGrow</i> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.CannotGrowEventArgs.#ctor(McKnight.Similization.Core.Improvement)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.CannotGrowEventArgs"/> class.
            </summary>
            <param name="neededImprovement"></param>
        </member>
        <member name="P:McKnight.Similization.Server.CannotGrowEventArgs.NeededImprovement">
            <summary>
            Gets the improvement that is needed by the city
            in order to grow beyond its' current size.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.CombatEventArgs">
            <summary>
            Event Arguments for the <c>Combat</c> event handler.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.CombatEventArgs.#ctor(McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <c>CombatEventArgs</c> class.
            </summary>
            <param name="foe"></param>
        </member>
        <member name="P:McKnight.Similization.Server.CombatEventArgs.Foe">
            <summary>
            The unit that is being attacked.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.DefeatedEventArgs">
            <summary>
            Event arguments for the <c>Defeated</c> event of a country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.DefeatedEventArgs.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <c>DefeatedEventArgs</c> class.
            </summary>
            <param name="conqueror"></param>
            <param name="victim"></param>
        </member>
        <member name="P:McKnight.Similization.Server.DefeatedEventArgs.Conqueror">
            <summary>
            Gets the <c>Country</c> that defeated the (now) defunct 
            civilization.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.DefeatedEventArgs.Victim">
            <summary>
            Gets the <c>Country</c> that was defeated.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.GameEndedEventArgs">
            <summary>
            Event Arguments for the <c>GameEnded</c> event of the <c>GameRoot</c> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameEndedEventArgs.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.VictoryType)">
            <summary>
            Initializes a new instance of the <c>GameEndedEventArgs</c> class.
            </summary>
            <param name="victor"></param>
            <param name="typeOfVictory"></param>
        </member>
        <member name="P:McKnight.Similization.Server.GameEndedEventArgs.VictoryType">
            <summary>
            Gets the type of victory that was achieved.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameEndedEventArgs.Victor">
            <summary>
            Gets the <c>Country</c> that has won the game.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.TradeProposedEventArgs">
            <summary>
            Event Args for the <i>TradeProposed</i> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.TradeProposedEventArgs.#ctor(System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable},System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable},McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.TradeProposedEventArgs"/> class.
            </summary>
            <param name="givenItems"></param>
            <param name="takenItems"></param>
            <param name="foreignCountry"></param>
        </member>
        <member name="P:McKnight.Similization.Server.TradeProposedEventArgs.GivenItems">
            <summary>
            The items the proposer is giving.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.TradeProposedEventArgs.TakenItems">
            <summary>
            The items the proposer wants in return.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.TradeProposedEventArgs.ForeignCountry">
            <summary>
            The country the proposer is offering the trade to.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.CapturedEventArgs">
            <summary>
            Event Args for the <c>CityCaptured</c> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.CapturedEventArgs.#ctor(McKnight.Similization.Core.CountryBase,McKnight.Similization.Core.CountryBase,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.CapturedEventArgs"/> class.
            </summary>
            <param name="invader"></param>
            <param name="loser"></param>
            <param name="goldPlundered"></param>
        </member>
        <member name="P:McKnight.Similization.Server.CapturedEventArgs.Invader">
            <summary>
            Gets the country that invaded the city.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.CapturedEventArgs.Loser">
            <summary>
            Gets the country that once owned this city.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.CapturedEventArgs.GoldPlundered">
            <summary>
            Gets the amount of gold plundered from the city.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.AudienceRequestedEventArgs">
            <summary>
            Event arguments for the <c>AudienceRequested</c> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.AudienceRequestedEventArgs.#ctor(McKnight.Similization.Server.Country,System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable},System.Collections.ObjectModel.Collection{McKnight.Similization.Core.ITradable})">
            <summary>
            Initializes a new instance of the <c>AudienceRequestedEventArgs</c> class.
            </summary>
            <param name="requester"></param>
            <param name="givenItems"></param>
            <param name="takenItems"></param>
        </member>
        <member name="P:McKnight.Similization.Server.AudienceRequestedEventArgs.Requester">
            <summary>
            The country requesting an audience.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.AudienceRequestedEventArgs.GivenItems">
            <summary>
            An collection of tradeable items that the foreign country is offering.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.AudienceRequestedEventArgs.TakenItems">
            <summary>
            An collection of tradeable items that the foreign country wants from the 
            player.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.CityStatusEventArgs">
            <summary>
            Event arguments for the <c>CityStatusChanged</c> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.CityStatusEventArgs.#ctor(McKnight.Similization.Core.CityStatus,McKnight.Similization.Core.CityStatus)">
            <summary>
            Initializes a new instance of the <c>CityStatusEventArgs</c> class.
            </summary>
            <param name="newStatus"></param>
            <param name="previousStatus"></param>
        </member>
        <member name="P:McKnight.Similization.Server.CityStatusEventArgs.CityStatus">
            <summary>
            The new status of the city.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.CityStatusEventArgs.PreviousStatus">
            <summary>
            The previous status of the city.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.PollutionEventArgs">
            <summary>
            Event Arguments for the <c>PollutionCreated</c> event of a City.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.PollutionEventArgs.#ctor(McKnight.Similization.Server.GridCell)">
            <summary>
            Initializes a new instance of the <c>PollutionEventArgs</c> class.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="P:McKnight.Similization.Server.PollutionEventArgs.GridCell">
            <summary>
            Gets a reference to the cell that now has the pollution.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.GovernmentAvailableEventArgs">
            <summary>
            Event arguments for the <c>NewGovernmentAvailable</c> event of a <c>Country</c> object.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GovernmentAvailableEventArgs.#ctor(McKnight.Similization.Core.Government)">
            <summary>
            Initializes a new instance of the <c>GovernmentAvailableEventArgs</c> class.
            </summary>
            <param name="government"></param>
        </member>
        <member name="P:McKnight.Similization.Server.GovernmentAvailableEventArgs.Government">
            <summary>
            Gets the <c>Government</c> that is now available.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.RevolutionEndedEventArgs">
            <summary>
            Event Arguments for the <c>RevolutionEnded</c> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.RevolutionEndedEventArgs.#ctor(McKnight.Similization.Core.Government)">
            <summary>
            Initializes a new instance of the <c>RevolutionEndedEventArgs</c> class.
            </summary>
            <param name="nextGovernment"></param>
        </member>
        <member name="P:McKnight.Similization.Server.RevolutionEndedEventArgs.NextGovernment">
            <summary>
            Gets the recommended government to switch to.
            </summary>
            <remarks>For revolutions started from government changes, this will be the
            government the player tried to change to that resulted in the revolution.</remarks>
        </member>
        <member name="T:McKnight.Similization.Server.StrategyChangedEventArgs">
            <summary>
            Event Args for the <c>StrategyChanged</c> event of an AI Country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.StrategyChangedEventArgs.#ctor(McKnight.Similization.Server.AIStrategy,McKnight.Similization.Server.AIStrategy)">
            <summary>
            Initializes a new instance of the <c>StrategyChangedEventArgs</c> class.
            </summary>
            <param name="oldStrategy"></param>
            <param name="newStrategy"></param>
        </member>
        <member name="P:McKnight.Similization.Server.StrategyChangedEventArgs.OldStrategy">
            <summary>
            Gets the old strategy of the country.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.StrategyChangedEventArgs.NewStrategy">
            <summary>
            Gets the new strategy of the country.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.StatusChangedEventArgs">
            <summary>
            Event Args for the StatusChanged Event Handler.  This class
            exposes properties for the status message, and the percent 
            complete for the operation giving the status.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.StatusChangedEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Intializes a new instance of the <c>StatusChangedEventArgs</c> class.
            </summary>
            <param name="message"></param>
            <param name="percentDone"></param>
        </member>
        <member name="P:McKnight.Similization.Server.StatusChangedEventArgs.PercentDone">
            <summary>
            The overall percent complete of the operation this status change is
            a part of.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.StatusChangedEventArgs.Message">
            <summary>
            The message associated with the new status.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.VillageEventArgs">
            <summary>
            Event Arguments for the <c>VillageEncountered</c> event of a unit.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.VillageEventArgs.#ctor(McKnight.Similization.Server.Village,McKnight.Similization.Server.VillageGoody)">
            <summary>
            Initializes a new instance of the <c>VillageEventArgs</c> class.
            </summary>
            <param name="villageEncountered"></param>
            <param name="goody"></param>
        </member>
        <member name="P:McKnight.Similization.Server.VillageEventArgs.Village">
            <summary>
            Gets the village encountered.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.VillageEventArgs.Goody">
            <summary>
            Gets the <c>VillageGoody</c> that was found in the village.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.ExpansionStrategy">
            <summary>
            Represents a strategy for the AI that will have the AI attempting
            to expand their empire as quickly as possible.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.ExpansionStrategy.#ctor(McKnight.Similization.Server.AICountry)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.ExpansionStrategy"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.ExpansionStrategy.OnTradeProposed(System.Object,McKnight.Similization.Server.TradeProposedEventArgs)">
            <summary>
            Event handler for the <i>TradeProposed</i> event of the foreign country
            that has the Expansion Strategy.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.ExpansionStrategy.Invoke(McKnight.Similization.Server.AICity)">
            <summary>
            Starts using this strategy for the city.
            </summary>
            <param name="foreignCity"></param>
        </member>
        <member name="M:McKnight.Similization.Server.ExpansionStrategy.OnImprovementBuilt(System.Object,McKnight.Similization.Server.ImprovementBuiltEventArgs)">
            <summary>
            Event handler for the <i>ImprovementBuilt</i> event of a city using this strategy.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:McKnight.Similization.Server.GameRoot">
            <summary>
            This is the main "game" object.
            </summary>
            <remarks>The <see cref="T:McKnight.Similization.Server.GameRoot"/> class implements the Singleton pattern.  Only one 
            instance of the <see cref="T:McKnight.Similization.Server.GameRoot"/> class can ever exist.  Furthermore, the <see cref="T:McKnight.Similization.Server.GameRoot"/> 
            class cannot be instantiated directly, rather an instance must be retrieved from the 
            static <i>Instance</i> property.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.GameRoot"/> class.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.ActiveUnit">
            <summary>
            The unit currently active in the game
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.ActiveCountry">
            <summary>
            The country that is currently taking it's turn
            in the game.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.Countries">
            <summary>
            Gets a list of countries in the game
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.Grid">
            <summary>
            Gets the grid being used in the game.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.Year">
            <summary>
            Gets the current year for the game
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.History">
            <summary>
            Gets the game history.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.Rules">
            <summary>
            Gets or sets the rules of the game.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.Ruleset">
            <summary>
            The <see cref="P:McKnight.Similization.Server.GameRoot.Ruleset"/> the game is currently playing on.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GameRoot.Instance">
            <summary>
            Gets an instance of the Game Root object.  This is a singleton implementation,
            and will always return the same instance.
            </summary>
            <returns></returns>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.ActiveUnitChanged">
            <summary>
            Event that fires whenever the active unit in the game is changed.  This 
            happens whenever the turn for a unit is finished.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.OnActiveUnitChanged">
            <summary>
            Fires the <i>ActiveUnitChanged</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.GameStarted">
            <summary>
            Event that fires when the game begins.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.OnGameStarted">
            <summary>
            Fires the <i>GameStarted</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.LoadedGameStarted">
            <summary>
            Occurs when the game is successfully loaded by the server and started.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.GameEnded">
            <summary>
            Occurs whenever a player has won the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.OnGameEnded(McKnight.Similization.Server.GameEndedEventArgs)">
            <summary>
            Fires the <i>GameEnded</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.CountriesLoaded">
            <summary>
            Event that fires whent the GameRoot object is finished loading countries
            from the save game file.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.ServerStarted">
            <summary>
            Event that fires after the server has been successfully started.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.OnServerStarted">
            <summary>
            Fires the <i>ServerStarted</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.ServerStarting">
            <summary>
            Event that fires when someone starts the server.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.OnServerStarting">
            <summary>
            Fires the <i>ServerStarting</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.StatusChanged">
            <summary>
            Occurs when a Server Status changes.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.OnStatusChanged(McKnight.Similization.Server.StatusChangedEventArgs)">
            <summary>
            Fires the <i>StatusChanged</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.GameRoot.TurnFinished">
            <summary>
            Event that fires whenever a round of turns is finished in the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.OnTurnFinished">
            <summary>
            Fires the <i>TurnFinished</i> event.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.LoadRuleset(System.String)">
            <summary>
            Loads the Ruleset from the file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.StartServer(McKnight.Similization.Core.WorldSize,McKnight.Similization.Core.Age,McKnight.Similization.Core.Temperature,McKnight.Similization.Core.Climate,McKnight.Similization.Core.Landmass,McKnight.Similization.Core.WaterCoverage,McKnight.Similization.Server.BarbarianAggressiveness,McKnight.Similization.Core.Difficulty,McKnight.Similization.Server.Rules)">
            <summary>
            Starts a new server session.
            </summary>
            <param name="worldSize"></param>
            <param name="age"></param>
            <param name="climate"></param>
            <param name="landmass"></param>
            <param name="temperature"></param>
            <param name="waterCoverage"></param>
            <param name="barbarianAggressiveness"></param>
            <param name="difficulty"></param>
            <param name="rules"></param>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.StartGame">
            <summary>
            Starts the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.StartLoadedGame">
            <summary>
            Starts a pre-loaded game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.ActivateNextUnit">
            <summary>
            Finds the next <see cref="T:McKnight.Similization.Server.Unit"/> that should be active and activates the <see cref="T:McKnight.Similization.Server.Unit"/>
            </summary>
            <returns>The <see cref="T:McKnight.Similization.Server.Unit"/> that is now active.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.ActivateNextCountry">
            <summary>
            Activates the <see cref="T:McKnight.Similization.Server.Country"/> whose turn is next.
            </summary>
            <returns>The <see cref="T:McKnight.Similization.Server.Country"/> that is now active.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.SaveGame(System.String)">
            <summary>
            Saves the current game to disk
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.LoadGame(System.String)">
            <summary>
            Loads a game from the filename.
            </summary>
            <param name="fileName">Path to an xml save game file.</param>
        </member>
        <member name="M:McKnight.Similization.Server.GameRoot.AddVillages(McKnight.Similization.Core.WorldSize)">
            Adds the villages to the grid.		
        </member>
        <member name="T:McKnight.Similization.Server.GoldLumpSum">
            <summary>
            Represents a lump sum of gold that can be traded or given away during 
            negotations and/or trades.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GoldLumpSum.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.GoldLumpSum"/> class.
            </summary>
            <param name="lumpAmount">The amount of gold in the lump sum.</param>
        </member>
        <member name="M:McKnight.Similization.Server.GoldLumpSum.CalculateValueForCountry(McKnight.Similization.Core.CountryBase)">
            <summary>
            Returns the value of the gold to the specified <see cref="T:McKnight.Similization.Server.Country"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GoldLumpSum.ToString">
            <summary>
            Gets a string representation of the lump sum of gold.
            </summary>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.GoldLumpSum.LumpSum">
            <summary>
            Gets the amount of gold in the lump sum.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.GoldPerTurn">
            <summary>
            Represents an amount of gold per turn that will be paid to a foreign country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GoldPerTurn.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>GoldPerTurn</c> class.
            </summary>
            <param name="amountPerTurn"></param>
        </member>
        <member name="M:McKnight.Similization.Server.GoldPerTurn.CalculateValueForCountry(McKnight.Similization.Core.CountryBase)">
            <summary>
            Returns the value of the trade for the specified <see cref="T:McKnight.Similization.Server.Country"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.GoldPerTurn.AmountPerTurn">
            <summary>
            Gets the amount of gold per turn that will be given to a foreign country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GoldPerTurn.ToString">
            <summary>
            Gets a string representation of the <c>GoldPerTurn</c> class instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.GoldGoody">
            <summary>
            Represents a "goody" found in a village.  This goody is gold.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GoldGoody.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>GoldGoody</c> class.
            </summary>
            <param name="tribeName"></param>
            <param name="gold"></param>
        </member>
        <member name="P:McKnight.Similization.Server.GoldGoody.Gold">
            <summary>
            Gets the amount of gold found in the village.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GoldGoody.ApplyGoody(McKnight.Similization.Server.Country)">
            <summary>
            Applies the goody.
            </summary>
            <param name="goodyOwner"></param>
        </member>
        <member name="T:McKnight.Similization.Server.GoodyFactory">
            <summary>
            Contains methods to create and return "goodies" that are to 
            be placed inside villages.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GoodyFactory.GetGoody(McKnight.Similization.Server.Village,McKnight.Similization.Server.Unit)">
            <summary>
            Gets a <see cref="T:McKnight.Similization.Server.VillageGoody"/> from the factory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GoodyFactory.GetUnit(McKnight.Similization.Server.Unit)">
            <summary>
            Gets a new unit from the village for the exploring units' country.
            </summary>
            <param name="explorer"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GoodyFactory.GetSettler(McKnight.Similization.Server.Unit)">
            <summary>
            Gets a new settler from the village for the exploring units' country.
            </summary>
            <param name="explorer"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GoodyFactory.GetBarbarian(McKnight.Similization.Server.Unit)">
            <summary>
            Gets a barbarian from the village.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GoodyFactory.GetTechnology(McKnight.Similization.Server.Country)">
            <summary>
            Gets a new technology from the village for the exploring country.
            </summary>
            <param name="explorer"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GoodyFactory.GetCity(McKnight.Similization.Server.Village,McKnight.Similization.Server.Unit)">
            <summary>
            Gets a new city from the village for the exploring units' country.
            </summary>
            <param name="v"></param>
            <param name="explorer"></param>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.Grid">
            <summary>
            Represents a Grid for the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.#ctor(McKnight.Similization.Server.GridCell[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Grid"/> class.
            </summary>
            <param name="gridCells"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.GetCell(System.Drawing.Point)">
            <summary>
            Gets the <see cref="T:McKnight.Similization.Server.GridCell"/> with the specifed coordinates.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Grid.Size">
            <summary>
            The Size of the Grid.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.CalculateDistanceBetweenCoordinates(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Returns the distance, in cell units to the cell passed into the method.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="E:McKnight.Similization.Server.Grid.CellImprovementDestroyed">
            <summary>
            Occurs when a <see cref="T:McKnight.Similization.Server.GridCell"/> on the grid has an improvement destroyed.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.GetCityLocationDesirability(McKnight.Similization.Server.GridCell)">
            <summary>
            Gets a number between 1 and 100 for the city desirability.
            </summary>
            <param name="possibleCityLocation"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.ExploreArea(System.Drawing.Point,McKnight.Similization.Server.Country)">
            <summary>
            Explores the cell for the colony.
            </summary>
            <param name="coordinates"></param>
            <param name="explorer"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.FindRandomCell">
            <summary>
            Gets a random <see cref="T:McKnight.Similization.Server.GridCell"/> object in the current map.
            </summary>
            <returns>a random grid cell</returns>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.FindRandomDryCell">
            <summary>
            Gets a random land-based cell on the map.
            </summary>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.Grid.DryCells">
            <summary>
            Gets a list of GridCells that have "dry" terrain types (i.e. not sea/lake/ocean)
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.GetTerritoryAmount(McKnight.Similization.Server.Country)">
            <summary>
            Gets the number of cells on the map under the control of the player.
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the Grid information.
            </summary>
            <param name="writer">The <c>XmlWriter</c> to writer the grid information to.</param>
        </member>
        <member name="M:McKnight.Similization.Server.Grid.Load(System.Xml.XmlReader)">
            <summary>
            Loads the Grid information.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:McKnight.Similization.Server.GridCell">
            <summary>
            Represents a single grid cell on the map.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.GridCell"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.GridCell"/> class.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.GridCell"/> class.
            </summary>
            <param name="location"></param>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.FoodUnits">
            <summary>
            Gets the number of food units located in the square.  
            </summary>
            <remarks>
            This takes into account any cell improvements, such as roads or railroads,
            and any "natural" improvements, such as game, or wheat.
            </remarks>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.Shields">
            <summary>
            Gets shields this cell will produce each turn.  
            </summary>
            <remarks>
            This takes into account any cell improvements (i.e. a mine).
            </remarks>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.GoldPerTurn">
            <summary>
            Gets the amount of gold that is produced by
            the cell during each turn.  
            </summary>
            <remarks>
            This takes into account any cell improvements, such as a mine or road.
            </remarks>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.City">
            <summary>
            Gets or sets the city located in this cell.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.RoadLayout">
            <summary>
            Gets the layout of the road on the cell.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.RiverLayout">
            <summary>
            Gets the layour of the river on the cell.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.BorderType">
            <summary>
            Gets the border type of the cell.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.Village">
            <summary>
            Gets or sets the a <see cref="P:McKnight.Similization.Server.GridCell.Village"/> object
            that is located in this cell.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.Units">
            <summary>
            Gets a list of units currently stationed at this cell.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.GridCell.HasCity">
            <summary>
            Determines whether there is a <see cref="P:McKnight.Similization.Server.GridCell.City"/> on this <see cref="T:McKnight.Similization.Server.GridCell"/>.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.GridCell.CellImprovementDestroyed">
            <summary>
            Occurs when an attacking unit destroys an improvement on the cell, such
            as irrigation or roads.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.OnCellImprovementDestroyed(McKnight.Similization.Server.CellImprovementDestroyedEventArgs)">
            <summary>
            Raises the <i>CellImprovementDestroyed</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.HasBeenExploredBy(McKnight.Similization.Server.Country)">
            <summary>
            Queries the cell to see if it has been explored by the country passed as a parameter.
            </summary>
            <param name="explorer"></param>
            <returns><c>true</c> if the cell has been explored by <c>Country</c>, <c>false</c>
            otherwise.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.HasAccessToFreshWater">
            <summary>
            Queries the cell to see if it has access to a fresh water supply.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.Explore(McKnight.Similization.Core.CountryBase)">
            <summary>
            Explores the cell for the colony.
            </summary>
            <param name="explorer"></param>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.FindWorkerAction">
            <summary>
            Gets the best suited work to be performed on the cell.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.CanGetTo(McKnight.Similization.Core.Resource,McKnight.Similization.Server.GridCell)">
            <summary>
            Gets a value indicating if a resource is reachable from this cell
            by road or railroad.
            </summary>
            <param name="resource">The resource to check for.</param>
            <param name="source">The starting point.</param>
            <returns><c>true</c> if the resource is accessible by road, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.FindClosestUnit">
            <summary>
            Gets the closest unit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.FindClosestUnit(McKnight.Similization.Server.Country)">
            <summary>
            Gets the closest unit belonging the the parent country on the grid.
            </summary>
            <param name="parentCountry"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.FindClosestPillagableCoordinates(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Returns the closest cell of the foreign country that 
            can be pillaged (has improvements).
            </summary>
            <param name="parentCountry">The country doing the pillaging</param>
            <param name="foreignCountry">The country being pillaged</param>
            <returns>Coordinates to pillage</returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.FindClosestForeignCity(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Returns the closest explored foreign city of that has been explored
            by the parent country.
            </summary>
            <param name="parentCountry">The parent country.  Foreign cities will only be 
            returned if they have been explored by the parent country</param>
            <param name="foreignCountry">The country to search for the forieign cities</param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.FindClosestDomesticCity(McKnight.Similization.Server.Country)">
            <summary>
            Gets the closest <see cref="P:McKnight.Similization.Server.GridCell.City"/> belonging to the <see cref="T:McKnight.Similization.Server.Country"/> that is passed to 
            the method.
            </summary>
            <param name="parentCountry">The parent country of the <see cref="P:McKnight.Similization.Server.GridCell.City"/> to find.</param>
            <returns>A <see cref="P:McKnight.Similization.Server.GridCell.City"/> object representing the city that is closest.</returns>
            <remarks>This method will ignore any <see cref="P:McKnight.Similization.Server.GridCell.City"/> objects within the local 
            <see cref="T:McKnight.Similization.Server.GridCell"/>.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.FindClosestDomesticCity(McKnight.Similization.Server.Country,McKnight.Similization.Core.NamedObjectCollection{McKnight.Similization.Server.City})">
            <summary>
            Gets the closest <see cref="P:McKnight.Similization.Server.GridCell.City"/> belonging to the <see cref="T:McKnight.Similization.Server.Country"/> that is passed to 
            the method.  The <see cref="P:McKnight.Similization.Server.GridCell.City"/> cannot be in the array of excluded cities.
            </summary>
            <param name="parentCountry"></param>
            <param name="exclusions"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.FindClosestEmptyLandCell">
            <summary>
            Gets the closest "dry" cell that is unoccupied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.HasCityInRadius(System.Int32)">
            <summary>
            Gets a value indicating whether or not there is a city within the radius
            of the value passed in.
            </summary>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.HasBorderOfType(McKnight.Similization.Server.BorderTypes)">
            <summary>
            Gets a value indicating if the grid cell has a border
            with the specified border type.
            </summary>
            <param name="borderType"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.RefreshBorders">
            <summary>
            Refreshes the border information.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the GridCell information.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.LoadExplorers(System.Xml.XmlReader)">
            <summary>
            Loads the list of countries that have explored this cell.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:McKnight.Similization.Server.GridCell.Load(System.Xml.XmlReader)">
            <summary>
            Loads the grid cell information into the grid cell object.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:McKnight.Similization.Server.GridCellItemDirection">
            <summary>
            Describes the layout of items like roads, railroads, and rivers 
            on a particular cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.None">
            <summary>
            The item does not exist on this cell.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.NorthSouth">
            <summary>
            The item goes in a north/south direction.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.EastWest">
            <summary>
            The item goes in an east/west direction.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.Bidirectional">
            <summary>
            The item goes both east/west and north/south (multiple items on the cell)
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.SoutheastCorner">
            <summary>
            The item turns in the cell from east to south.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.NortheastCorner">
            <summary>
            The item turns in the cell from east to north.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.SouthwestCorner">
            <summary>
            The item turns in the cell from south to west.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.NorthwestCorner">
            <summary>
            The item turns in the cell from nort to west.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.SoutheastToNorthwest">
            <summary>
            The item runs from the southeast to the northwest.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridCellItemDirection.SouthwestToNortheast">
            <summary>
            The item runs from the southwest to the northeast.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.GridOrientation">
            <summary>
            Different directions a player can be facing/moving on the grid.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridOrientation.FacingNorth">
            <summary>
            The object is facing a northerly direction.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridOrientation.FacingSouth">
            <summary>
            The object is facing a southerly direction.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridOrientation.FacingEast">
            <summary>
            The object is facing east.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridOrientation.FacingWest">
            <summary>
            The object is facing west.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridOrientation.FacingNortheast">
            <summary>
            The object is facing northeast.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridOrientation.FacingNorthwest">
            <summary>
            The object is facing northwest.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridOrientation.FacingSoutheast">
            <summary>
            The object is facing southeast.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.GridOrientation.FacingSouthwest">
            <summary>
            The object is facing southwest.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GridResourceBuilder.#ctor(McKnight.Similization.Server.Grid,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.GridResourceBuilder"/> class.
            </summary>
            <param name="grid"></param>
            <param name="resources"></param>
        </member>
        <member name="T:McKnight.Similization.Server.History">
            <summary>
            Keeps a history of all major events in the game for all civilizations
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.History.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.History"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.History.AddHistoryItem(McKnight.Similization.Server.HistoryItem)">
            <summary>
            Adds a history item to the History of the game.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:McKnight.Similization.Server.History.NextItem">
            <summary>
            Gets the next history item from the History of the game.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.History.GetHistoryFor(McKnight.Similization.Server.Country)">
            <summary>
            Gets a list of all the history items for a particular
            country.
            </summary>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.History.GetAllHistory">
            <summary>
            Gets all the history items in the History class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.History.HistoryItemCount">
            <summary>
            Gets the total number of history items for all colonies in the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.History.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the History to the the xml stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:McKnight.Similization.Server.History.Load(System.Xml.XmlReader)">
            <summary>
            Loads the history.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:McKnight.Similization.Server.HistoryItem">
            <summary>
            Represents an individual event for a colony in the history of the game.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.HistoryItem.Year">
            <summary>
            Gets or sets the year the event happened.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.HistoryItem.Country">
            <summary>
            Gets or sets the Country the event happened for.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.HistoryItem.CulturePoints">
            <summary>
            Gets or sets the total number of Culture Points the 
            colony had AFTER the event took place.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.HistoryItem.Score">
            <summary>
            Gets or sets the total number of Game points the 
            colony had AFTER the event took place.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.HistoryItem.Power">
            <summary>
            Gets or sets how many "power" points (military strength)
            the colony had AFTER the event took place.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.HistoryItem.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the history item data to XML.
            </summary>
            <param name="writer">The <c>XmlWriter</c> to write this history item to.</param>
        </member>
        <member name="M:McKnight.Similization.Server.HistoryItem.Load(System.Xml.XmlReader)">
            <summary>
            Loads the History Item.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:McKnight.Similization.Server.ImprovementBuiltEventArgs">
             <summary>
             Class the represents the arguments passes to listeners 
             of the event fired when an improvement is built. 
             </summary>
             <remarks>
             These arguments
             contain properties describing the improvement that was built,
             the city that built them, and the "recommended" next improvement.
            </remarks>
        </member>
        <member name="M:McKnight.Similization.Server.ImprovementBuiltEventArgs.#ctor(McKnight.Similization.Core.BuildableItem,McKnight.Similization.Server.City,McKnight.Similization.Core.BuildableItem)">
            <summary>
            Initializes a new instance of the <c>ImprovementBuiltEventArgs</c> class.
            </summary>
            <param name="improvement"></param>
            <param name="city"></param>
            <param name="recommendedNextImprovement"></param>
        </member>
        <member name="P:McKnight.Similization.Server.ImprovementBuiltEventArgs.City">
            <summary>
            The city that built the improvement.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ImprovementBuiltEventArgs.Improvement">
            <summary>
            The improvement that was just built.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ImprovementBuiltEventArgs.RecommendedImprovement">
            <summary>
            The "recommended" improvement to build next.  If it is not changed,
            this will be the improvement that is automatically started on the the
            next turn.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.ImprovementDestroyedEventArgs">
            <summary>
            Event Arguments for the <i>ImprovementDestroyed</i> event of a city.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.ImprovementDestroyedEventArgs.#ctor(McKnight.Similization.Core.Improvement,McKnight.Similization.Server.Country)">
            <summary>
            Initialzies a new instance of the <c>ImprovementEventArgs</c> class.
            </summary>
            <param name="improvement"></param>
            <param name="attackingCountry"></param>
        </member>
        <member name="P:McKnight.Similization.Server.ImprovementDestroyedEventArgs.Improvement">
            <summary>
            The Improvement the event is tied to.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ImprovementDestroyedEventArgs.AttackingCountry">
            <summary>
            The <c>Country</c> that attacked the city to destroy the improvement.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.GridBuilder">
            <summary>
            Class responsible for creating an instance of <see cref="T:McKnight.Similization.Server.Grid"/> objects.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.GridBuilder.Build(McKnight.Similization.Core.WorldSize,McKnight.Similization.Core.Age,McKnight.Similization.Core.Temperature,McKnight.Similization.Core.Climate,McKnight.Similization.Core.Landmass,McKnight.Similization.Core.WaterCoverage,McKnight.Similization.Core.Ruleset)">
            <summary>
            Generates a map with the specified parameters.
            </summary>
            <param name="worldSize"></param>
            <param name="worldAge"></param>
            <param name="worldTemperature"></param>
            <param name="worldClimate"></param>
            <param name="worldLandmass"></param>
            <param name="worldWaterCoverage"></param>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.GridBuilder.BuildGrid(System.Drawing.Size)">
            Builds a grid with the specified dimensions.        
        </member>
        <member name="T:McKnight.Similization.Server.JourneyCalculator">
            <summary>
            Class responsible for calculating the best possible paths for <see cref="T:McKnight.Similization.Server.Unit"/> objects
            moving to a desired destination.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.JourneyCalculator.CreateJourney(McKnight.Similization.Core.UnitBase,System.Drawing.Point)">
            <summary>
            Creates a <see cref="T:McKnight.Similization.Core.Journey"/> object that will represent the path the specified 
            <see cref="T:McKnight.Similization.Server.Unit"/> must follow in order to reach the specified <i>destination</i>.
            </summary>
            <param name="unit"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.MapGoody">
            <summary>
            Represents a village "goody" that contains a friendly tribe
            that shares their maps of the region with the exploring country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.MapGoody.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>MapGoody</c> class.
            </summary>
            <param name="tribeName"></param>
        </member>
        <member name="T:McKnight.Similization.Server.MilitaryAlliance">
            <summary>
            A Military Alliance is an agreement between 2 colonies to declare
            war on a third.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.MilitaryAlliance.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.MilitaryAlliance"/> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="allyCountry"></param>
            <param name="victim"></param>
        </member>
        <member name="M:McKnight.Similization.Server.MilitaryAlliance.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.MilitaryAlliance"/> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="allyCountry"></param>
        </member>
        <member name="P:McKnight.Similization.Server.MilitaryAlliance.AllianceVictim">
            <summary>
            Gets the <see cref="T:McKnight.Similization.Server.Country"/> that is the victim of the alliance.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.MutualProtectionPact">
            <summary>
            A mutual proctection pact is an agreement between 2 countries to 
            come to each others' aid at time of war.  If one country is attacked,
            the other country in the agreement will automatically declare war on 
            the attacking country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.MutualProtectionPact.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.MutualProtectionPact"/> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="allyCountry"></param>
        </member>
        <member name="T:McKnight.Similization.Server.MutualProtectionPactEventArgs">
            <summary>
            Event Arguments for the <i>MutualProtectionPactInvoked</i> event of a <see cref="T:McKnight.Similization.Server.Country"/>.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.MutualProtectionPactEventArgs.#ctor(McKnight.Similization.Server.MutualProtectionPact,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.MutualProtectionPactEventArgs"/> 
            class.
            </summary>
            <param name="pact"></param>
            <param name="commonEnemy"></param>
        </member>
        <member name="P:McKnight.Similization.Server.MutualProtectionPactEventArgs.CommonEnemy">
            <summary>
            The <see cref="T:McKnight.Similization.Server.Country"/> that has attacked our ally, causing 
            the partner in the <see cref="T:McKnight.Similization.Server.MutualProtectionPact"/> to delcare 
            war on them.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.MutualProtectionPactEventArgs.MutualProtectionPact">
            <summary>
            The <see cref="T:McKnight.Similization.Server.MutualProtectionPact"/> associated 
            with the event.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.NamespaceDoc">
            <summary>
            Contains classes that store and manipulate the game state.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.PeaceTreaty">
            <summary>
            Class representing a peace treaty between 2 countries.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.PeaceTreaty.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.PeaceTreaty"/> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="foreignCountry"></param>
        </member>
        <member name="T:McKnight.Similization.Server.RandomNumber">
            <summary>
            A class to help generate random numbers
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.RandomNumber.UpTo(System.Int32)">
            <summary>
            Gets a random number from 1 to <c>maxValue</c>
            </summary>
            <param name="maxValue">The maximum value the random number can be.</param>
            <returns>The random number.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.RandomNumber.Between(System.Int32,System.Int32)">
            <summary>
            Gets a random number from <c>minValue</c> to <c>maxValue</c>
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns>A random number between the parameters</returns>
        </member>
        <member name="T:McKnight.Similization.Server.RightOfPassage">
            <summary>
            A Right of passage agreement between 2 countries allows the
            countries to freely pass each others land, use their roads and
            rail, without fear of retaliation.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.RightOfPassage.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <c>RightOfPassage</c> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="allyCountry"></param>
        </member>
        <member name="T:McKnight.Similization.Server.Rules">
            <summary>
            Represents the rules of the game.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Rules.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Rules"/> class.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Rules.AllowDominationVictory">
            <summary>
            Gets or sets value indicating whether or not domination victories are allowed.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Rules.AllowDiplomaticVictory">
            <summary>
            Gets or sets a value indicating whether or not diplomatic victories are allowed.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Rules.AllowCulturalVictory">
            <summary>
            Gets or sets a value indicating whether or not cultural victories are allowed.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Rules.AllowSpaceVictory">
            <summary>
            Gets or sets a value indicating whether or not space victories are allowed.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Rules.AllowMilitaryVictory">
            <summary>
            Gets or sets a value indicating whether or not military victories are allowed.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Rules.AllowCivilizationSpecificAbilities">
            <summary>
            Gets or sets a value indicating whether or not to allow civilization-specific abilities.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Rules.Load(System.Xml.XmlReader)">
            <summary>
            Loads the rules from the XmlReader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Rules.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the rules to the xml writer.
            </summary>
            <param name="writer">The <c>XmlWriter</c> to write the rules to.</param>
        </member>
        <member name="T:McKnight.Similization.Server.IOwnable">
            <summary>
            Defines an interface for things that can be owned.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.IOwnable.ParentCountry">
            <summary>
            The colony that owns the item.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.Settler">
            <summary>
            Class representing a unit to settle new cities.
            </summary>
            <remarks>
            Settlers are special units that can form new cities, 
            or join existing cities and increase their population.
            </remarks>
        </member>
        <member name="M:McKnight.Similization.Server.Settler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Settler"/> object.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Settler.#ctor(System.Drawing.Point,McKnight.Similization.Core.UnitBase)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Settler"/> object.
            </summary>
            <param name="coordinates"></param>
            <param name="unitClone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Settler.Settle(System.String)">
            <summary>
            Settles a new city.  This will create a new city (with the 
            given name), and remove the settler from the map.
            </summary>
            <param name="cityName">The name of the city to create.</param>
            <returns>A <c>City</c> object for the city just created.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.Settler.JoinCity(McKnight.Similization.Server.City)">
            <summary>
            Joins the given city.  When this happens, the city's population 
            will increase by 2 points, and the settler will be removed from
            the map.
            </summary>
            <param name="city"></param>
        </member>
        <member name="T:McKnight.Similization.Server.SettlerGoody">
            <summary>
            Represents a Settler "goody".  This is a settler that has joined
            the country that found the village.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.SettlerGoody.#ctor(System.String,McKnight.Similization.Server.Settler)">
            <summary>
            Initializes a new instance of the <c>SettlerGoody</c> class.
            </summary>
            <param name="tribeName"></param>
            <param name="newSettler"></param>
        </member>
        <member name="M:McKnight.Similization.Server.SettlerGoody.ApplyGoody(McKnight.Similization.Server.Country)">
            <summary>
            Adds the settler to the parent's units.
            </summary>
            <param name="goodyOwner"></param>
        </member>
        <member name="P:McKnight.Similization.Server.SettlerGoody.Settler">
            <summary>
            Gets the settler that joined the country
            from the village.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.ServerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.AddingVillages">
            <summary>
              Looks up a localized string similar to Adding Villages....
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.CannotAssignTerrain">
            <summary>
              Looks up a localized string similar to Unable to find a suitable terrain for a {0} GridCell with an altitude of {1} and a temperature of {2}..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.CapitialNotInCountry">
            <summary>
              Looks up a localized string similar to This city cannot be made the capital because it does not belong to the host country..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.CellDoesNotContainCity">
            <summary>
              Looks up a localized string similar to The GridCell specified does not contain a city..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.CellDoesNotHaveRoad">
            <summary>
              Looks up a localized string similar to A Railroad cannot be placed on this cell because it does not have a road..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.CellHasRailroad">
            <summary>
              Looks up a localized string similar to This cell already has a Railroad..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.CityDoesNotHaveImprovement">
            <summary>
              Looks up a localized string similar to The city does not contain the specified improvement..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.CreatingMap">
            <summary>
              Looks up a localized string similar to Creating Map....
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.EmbassyRequired">
            <summary>
              Looks up a localized string similar to An embassy is required before this operation can be performed..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.EmptySeedArray">
            <summary>
              Looks up a localized string similar to Empty Seed Array..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.FortessOnNonDryCell">
            <summary>
              Looks up a localized string similar to Attempted to add a fortress to a non-dry cell..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.GoodyAlreadyApplied">
            <summary>
              Looks up a localized string similar to This goody has already been applied..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.GridCellHasCity">
            <summary>
              Looks up a localized string similar to There is already a city on this GridCell..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.InvalidCellForRiver">
            <summary>
              Looks up a localized string similar to A river cannot be placed on this cell..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.InvalidMapSize">
            <summary>
              Looks up a localized string similar to This saved game file contains an invalid map size..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.InvalidSizeNode">
            <summary>
              Looks up a localized string similar to This saved xml document either has an empty Size node or the Size node appears after the Cells list.  The Size node must appear before the Cell List..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.InvalidTypeName">
            <summary>
              Looks up a localized string similar to Invalid Type Name.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.InvalidWorldSize">
            <summary>
              Looks up a localized string similar to Invalid WorldSize.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.IrrigatedCellHasWater">
            <summary>
              Looks up a localized string similar to This cell cannot be irrigated because it contains water..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.MinedCellHasWater">
            <summary>
              Looks up a localized string similar to This cell cannot be mined because it contains water..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.NoDiplomaticTie">
            <summary>
              Looks up a localized string similar to There is no diplomatic tie with this country..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.NoMutualProtectionPact">
            <summary>
              Looks up a localized string similar to There is no mutual protection pact with this country..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.RailroadCellHasWater">
            <summary>
              Looks up a localized string similar to A Railroad cannot be placed on this cell because it contains water..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.RoadCellHasRailroad">
            <summary>
              Looks up a localized string similar to This cell already has a Railroad..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.RoadCellHasRoad">
            <summary>
              Looks up a localized string similar to This cell already has a road..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.RoadCellHasWater">
            <summary>
              Looks up a localized string similar to A road cannot be placed on this cell because it contains water..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.RulesetDoesNotHavePrimaryGovernment">
            <summary>
              Looks up a localized string similar to This ruleset does not contain a primary government..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.RulesetHasInvalidRoadBonus">
            <summary>
              Looks up a localized string similar to The road bonus of this ruleset is invalid.  It must be a positive number..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.SpyRequired">
            <summary>
              Looks up a localized string similar to A spy is required for espionage missions..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.UnitCannotBombard">
            <summary>
              Looks up a localized string similar to This unit cannot bombard targets..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.UnitCannotPrecisionStrike">
            <summary>
              Looks up a localized string similar to This unit cannot perform precision strikes..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.UnknownCombatResult">
            <summary>
              Looks up a localized string similar to Unknown Combat result.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.UnknownSeedSize">
            <summary>
              Looks up a localized string similar to Unable to determine seed size..
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.ServerResources.UnknownWorkerEfficiency">
            <summary>
              Looks up a localized string similar to Unknown Worker Efficiency..
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.SpyCapturedEventArgs">
            <summary>
            Event Arguments for the <i>SpyCaptured</i> event of a <see cref="T:McKnight.Similization.Server.Country"/>.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.SpyCapturedEventArgs.#ctor(McKnight.Similization.Server.DiplomaticTie,McKnight.Similization.Server.EspionageAction,System.Boolean,McKnight.Similization.Server.City)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.SpyCapturedEventArgs"/> class.
            </summary>
            <param name="diplomaticTie"></param>
            <param name="espionageAction"></param>
            <param name="espionageCompleted"></param>
            <param name="city"></param>
        </member>
        <member name="P:McKnight.Similization.Server.SpyCapturedEventArgs.DiplomaticTie">
            <summary>
            The <see cref="P:McKnight.Similization.Server.SpyCapturedEventArgs.DiplomaticTie"/> between the <see cref="T:McKnight.Similization.Server.Country"/> that 
            captured the spy and the <see cref="T:McKnight.Similization.Server.Country"/> that lost the spy.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.SpyCapturedEventArgs.EspionageAction">
            <summary>
            The action that the spy was attempting to perform when (s)he was captured.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.SpyCapturedEventArgs.EspionageCompleted">
            <summary>
            Indicates whether the espionage the captured spy was attempting to perform 
            was completed.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.SpyCapturedEventArgs.City">
            <summary>
            Indicated the <see cref="P:McKnight.Similization.Server.SpyCapturedEventArgs.City"/> that the spy was captured in.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.StrategyFactory">
            <summary>
            Creates and returns AI strategies for AI opponents.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.StrategyFactory.GetStrategy(McKnight.Similization.Server.AICountry)">
            <summary>
            Gets an appropriate strategy for the opponent.
            </summary>
            <param name="opponent"></param>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.TechnologyGoody">
            <summary>
            Represents a village "goody" that contains a new technology for the
            country finding the village.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.TechnologyGoody.#ctor(System.String,McKnight.Similization.Core.Technology)">
            <summary>
            Initializes a new instance of the <c>TechnologyGoody</c> class.
            </summary>
            <param name="tribeName"></param>
            <param name="newTechnology"></param>
        </member>
        <member name="M:McKnight.Similization.Server.TechnologyGoody.ApplyGoody(McKnight.Similization.Server.Country)">
            <summary>
            Adds the technology to the country.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.TechnologyGoody.Technology">
            <summary>
            Gets the technology that was found in the village.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.TerrainBuilder">
            <summary>
            Class responsible for generating terrain for a grid.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.TerrainBuilder.#ctor(McKnight.Similization.Server.Grid,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.TerrainBuilder"/> class.
            </summary>
            <param name="grid"></param>
            <param name="terrains"></param>
        </member>
        <member name="M:McKnight.Similization.Server.TerrainBuilder.GenerateTerrain">
            <summary>
            Generates terrain for all of the <see cref="T:McKnight.Similization.Server.GridCell"/> objects 
            within the <see cref="T:McKnight.Similization.Server.Grid"/>.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.WorldMap">
            <summary>
            The tradable world map of a particular <see cref="T:McKnight.Similization.Server.Country"/>. 
            </summary>
            <remarks>The world map represents all of the area on the map 
            the <i>Owner</i> has explored.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.WorldMap.CalculateValueForCountry(McKnight.Similization.Core.CountryBase)">
            <summary>
            Gets the value of the world map.
            </summary>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.WorldMap.Owner">
            <summary>
            The owner of the <see cref="T:McKnight.Similization.Server.WorldMap"/>
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.TerritoryMap">
            <summary>
            The territory map of a particular civilization
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.TerritoryMap.#ctor(McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.TerritoryMap"/> class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:McKnight.Similization.Server.TerritoryMap.CalculateValueForCountry(McKnight.Similization.Core.CountryBase)">
            <summary>
            Gets the value of the territory map.
            </summary>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.TerritoryMap.Owner">
            <summary>
            The owner of the <see cref="T:McKnight.Similization.Server.TerritoryMap"/>.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.TradeAgreement">
            <summary>
            Represents a trade agreement between two countries.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.TradeAgreement.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <c>TradeAgreement</c> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="allyCountry"></param>
            <param name="parentItems"></param>
            <param name="allyItems"></param>
        </member>
        <member name="M:McKnight.Similization.Server.TradeAgreement.GetTradingItemsForCountry(McKnight.Similization.Server.Country)">
            <summary>
            Gets the items theat the country is trading.
            </summary>
            <param name="tradingPartner"></param>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.TradeEmbargo">
            <summary>
            A trade embargo is an agreement with two colonies
            not to trade resources or luxuries with a third 
            colony.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.TradeEmbargo.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <c>TradeEmbargo</c> class.
            </summary>
            <param name="parentCountry"></param>
            <param name="allyCountry"></param>
            <param name="victim"></param>
        </member>
        <member name="P:McKnight.Similization.Server.TradeEmbargo.EmbargoVictim">
            <summary>
            The victim of the trade embargo.  The allies
            agree not to trade with the victim.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.TradeResponse">
            <summary>
            Possible responses to a trade proposal
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.TradeResponse.Accept">
            <summary>
            Trade offer accepted
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.TradeResponse.TotalDecline">
            <summary>
            Trade offer angrily declined
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.TradeResponse.StrongDecline">
            <summary>
            Trade offer strongly declined
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.TradeResponse.NeutralDecline">
            <summary>
            Trade offer declined
            </summary>
        </member>
        <member name="F:McKnight.Similization.Server.TradeResponse.WeakDecline">
            <summary>
            Trade offer declined, but close to an acceptable deal.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.UnitCapturedEventArgs">
            <summary>
            Event Arguments fot the <i>Captured</i> event of a <see cref="T:McKnight.Similization.Server.Unit"/>.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.UnitCapturedEventArgs.#ctor(McKnight.Similization.Server.Unit,McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.UnitCapturedEventArgs"/> class.
            </summary>
            <param name="unitCaptured"></param>
            <param name="capturedBy"></param>
        </member>
        <member name="P:McKnight.Similization.Server.UnitCapturedEventArgs.CapturedBy">
            <summary>
            The enemy unit that has captured the unit.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.UnitCapturedEventArgs.UnitCaptured">
            <summary>
            The <see cref="T:McKnight.Similization.Server.Unit"/> that has been captured by the enemy.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.UnitFactory">
            <summary>
            Creates and returns units.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.UnitFactory.CreateSettler(System.Drawing.Point,McKnight.Similization.Server.Country)">
            <summary>
            Creates and returns a new <see cref="T:McKnight.Similization.Server.Settler"/> object placed 
            at the specified coordinates.
            </summary>
            <param name="coordinates"></param>
            <param name="parentCountry">The <see cref="T:McKnight.Similization.Server.Country"/> creating the settler.</param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.UnitFactory.CreateWorker(McKnight.Similization.Server.City)">
            <summary>
            Creates a new <see cref="T:McKnight.Similization.Server.Worker"/> object.
            </summary>
            <param name="parentCity">The <see cref="T:McKnight.Similization.Server.City"/> creating the <see cref="T:McKnight.Similization.Server.Worker"/>.</param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.UnitFactory.CreateUnit(McKnight.Similization.Server.City,McKnight.Similization.Server.Unit)">
            <summary>
            Creates and returns units from cities and base units.
            </summary>
            <param name="city"></param>
            <param name="baseUnit"></param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.UnitFactory.FromSaveGameUnitNode(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Gets a new unit from the save game unit xml node.
            </summary>
            <param name="reader"></param>
            <param name="isAIUnit"></param>
            <returns></returns>
        </member>
        <member name="T:McKnight.Similization.Server.UnitGoody">
            <summary>
            Represents a village "goody" that contains a new unit for the 
            country finding the village.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.UnitGoody.#ctor(System.String,McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.UnitGoody"/> class.
            </summary>
            <param name="tribeName"></param>
            <param name="newUnit"></param>
        </member>
        <member name="M:McKnight.Similization.Server.UnitGoody.ApplyGoody(McKnight.Similization.Server.Country)">
            <summary>
            Adds the unit goody to the finding country.
            </summary>
            <param name="goodyOwner"></param>
        </member>
        <member name="P:McKnight.Similization.Server.UnitGoody.Unit">
            <summary>
            Gets the unit that was found in the village.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.Unit">
            <summary>
            Base class for all units in Similization.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Unit"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Unit"/> class.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.#ctor(McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Unit"/> class.
            </summary>
            <param name="unitClone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.#ctor(System.Drawing.Point,McKnight.Similization.Core.UnitBase)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Unit"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="clone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.AddToGrid">
            <summary>
            Adds the unit to the <see cref="T:McKnight.Similization.Server.Grid"/> in the game.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Unit.ParentCountry">
            <summary>
            Gets or sets the parent country of the unit.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Unit.OriginalParentCountry">
            <summary>
            Gets the <see cref="T:McKnight.Similization.Server.Country"/> that was the original owner of 
            this <see cref="T:McKnight.Similization.Server.Unit"/>.
            </summary>
            <remarks>For units that have been captured, the <i>ParentCountry</i> property 
            will show the current owner, and this <i>OriginalParentCountry</i> property will 
            contain the <see cref="T:McKnight.Similization.Server.Country"/> that originally produced the <see cref="T:McKnight.Similization.Server.Unit"/>.</remarks>
        </member>
        <member name="P:McKnight.Similization.Server.Unit.Upgrade">
            <summary>
            The <see cref="T:McKnight.Similization.Server.Unit"/> that this unit upgrades to.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.Bombard(McKnight.Similization.Server.GridCell)">
            <summary>
            Bombards the given cell.
            </summary>
            <remarks>Not all bombardment attempts are successfull.  To determine the 
            outcome of an attempt, review the <i>BombardmentResult</i> return value.</remarks>
            <param name="cell"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.Bombard(McKnight.Similization.Server.GridCell,McKnight.Similization.Core.Improvement)">
            <summary>
            Performs a precision strike on the improvement specified.
            </summary>
            <param name="cell"></param>
            <param name="improvement"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.Capture(McKnight.Similization.Server.Unit)">
            <summary>
            Captures the unit for the invader.
            </summary>
            <param name="invadingUnit">The <see cref="T:McKnight.Similization.Server.Unit"/> that has captured this unit.</param>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.DoTurn">
            <summary>
            Takes a turn for the unit.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.CalculateDefensivePower">
            <summary>
            Gets a value indicating the defensive power of the unit, based
            on location, terrain, and unit type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.LoseHitPoint">
            <summary>
            Takes 1 hit point away from the unit.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.MergeWithCity">
            <summary>
            Merges with the <see cref="T:McKnight.Similization.Server.City"/> at the unit's location.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.CreateJourneyCalculator">
            <summary>
            Creates and returns the server implementation of the <see cref="T:McKnight.Similization.Core.IJourneyCalculator"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the unit to the desired cell.  Takes the appropriate 
            number of turns.
            </summary>
            <param name="destination">The coordinates on the <see cref="T:McKnight.Similization.Server.Grid"/> 
            the <see cref="T:McKnight.Similization.Server.Unit"/> is trying to move to.</param>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.ContinueJourney">
            <summary>
            Moves the <see cref="T:McKnight.Similization.Server.Unit"/> from the current <see cref="T:McKnight.Similization.Server.GridCell"/> to the next 
            cell in the <see cref="T:McKnight.Similization.Core.Journey"/>.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.Pillage">
            <summary>
            Pillages the current cell.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.Retreat">
            <summary>
            Attempts to retreat.  If there's a safe cell around,
            the unit will retreat to the safe cell.  Otherwise,
            the unit stays put and <i>Retreat</i> returns false
            </summary>
            <returns><i>true</i> for a successfull retreat; <i>false</i> for an unsuccessfull retreat.</returns>
        </member>
        <member name="E:McKnight.Similization.Server.Unit.Captured">
            <summary>
            Occurs when the <see cref="T:McKnight.Similization.Server.Unit"/> has been captured by an 
            enemy country.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.OnCaptured(McKnight.Similization.Server.UnitCapturedEventArgs)">
            <summary>
            Fires the <i>Captured</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.Unit.CombatStarted">
            <summary>
            Occurs when combat is started between this unit and another unit.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.OnCombatStarted(McKnight.Similization.Server.CombatEventArgs)">
            <summary>
            Fires the <i>CombatStarted</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:McKnight.Similization.Server.Unit.HitPointLost">
            <summary>
            Event that fires whenever the unit loses a hit point
            in combat.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.OnHitPointLost">
            <summary>
            Fires the <i>HitPointLost</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Unit.Killed">
            <summary>
            Event that fires whenever the unit is killed in combat
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.OnKilled">
            <summary>
            Fires the <i>Killed</i> event
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Unit.Moved">
            <summary>
            Event that fires whenever the unit moves to a new cell.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.OnMoved">
            <summary>
            Fires the <i>Moved</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Unit.TurnFinished">
            <summary>
            Event that fires whenever the unit has finished its' turn.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.OnTurnFinished">
            <summary>
            Fires the <i>TurnFinished</i> event.
            </summary>
        </member>
        <member name="E:McKnight.Similization.Server.Unit.VillageEncountered">
            <summary>
            Occurs when the <see cref="T:McKnight.Similization.Server.Unit"/> enters a <see cref="T:McKnight.Similization.Server.Village"/>.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.OnVillageEncountered(McKnight.Similization.Server.VillageEventArgs)">
            <summary>
            Fires the <i>VillageEncountered</i> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.Combat(McKnight.Similization.Server.Unit)">
            <summary>
            Engages the unit in combat with an enemy.
            </summary>
            <param name="defender">The enemy to engage in combat with.</param>
            <returns>a <see cref="T:McKnight.Similization.Server.CombatResult"/> enumeration representing the results of the
            fight.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the unit information.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Unit.Load(System.Xml.XmlReader)">
            <summary>
            Loads the unit information into the unit properties.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:McKnight.Similization.Server.Village">
            <summary>
            Villages are small tribes that can be found by different civilizations.
            When these villages are found, different things can happen.  For example,
            the people of the village may be happy and offer to join the civilization 
            or give them a technology or maps of their area.  Alternatively, the 
            tribe may contain barbarians who attack when encoutered.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Village.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Village"/> object.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Village.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Village"/> object.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Village.TribeName">
            <summary>
            Gets or sets the name of the tribe the village belongs to.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Village.Discover(McKnight.Similization.Server.Unit)">
            <summary>
            Enters the village.
            </summary>
            <param name="discoveringUnit"></param>
            <returns>The <see cref="T:McKnight.Similization.Server.VillageGoody"/> awarded to the discovering country.</returns>
        </member>
        <member name="M:McKnight.Similization.Server.Village.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the village information.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Village.Load(System.Xml.XmlReader)">
            <summary>
            Loads the village information.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:McKnight.Similization.Server.VillageGoody">
            <summary>
            Base class for all "goodies" you can find in a village.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.VillageGoody.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.VillageGoody"/> class.
            </summary>
            <param name="tribeName"></param>
        </member>
        <member name="P:McKnight.Similization.Server.VillageGoody.TribeName">
            <summary>
            Gets the name of the tribe the village belongs to.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.VillageGoody.ApplyGoody(McKnight.Similization.Server.Country)">
            <summary>
            Applies the goody to the country that just received the goody.
            </summary>
            <param name="goodyOwner"></param>
        </member>
        <member name="T:McKnight.Similization.Server.WarDeclaredEventArgs">
            <summary>
            Event Arguments for the <i>WarDeclared</i> event of a <see cref="T:McKnight.Similization.Server.Country"/>.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.WarDeclaredEventArgs.#ctor(McKnight.Similization.Server.Country,McKnight.Similization.Server.Country)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.WarDeclaredEventArgs"/> class.
            </summary>
            <param name="agressor"></param>
            <param name="victim"></param>
        </member>
        <member name="M:McKnight.Similization.Server.WarDeclaredEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.WarDeclaredEventArgs"/> class.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.WarDeclaredEventArgs.Agressor">
            <summary>
            The <see cref="T:McKnight.Similization.Server.Country"/> initiating the war.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.WarDeclaredEventArgs.Victim">
            <summary>
            The <see cref="T:McKnight.Similization.Server.Country"/> having war declared upon them.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Server.Worker">
            <summary>
            Represents a Similization worker.  Workers are responsible for building roads and 
            railroads, irrigating land, and cleaning up pollution.  Workers do not have any 
            offensive or defensive characteristics.  
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.#ctor">
            <summary>
            Intializes a new instance of the <see cref="T:McKnight.Similization.Server.Worker"/> class.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.#ctor(McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Worker"/> class.
            </summary>
            <param name="unitClone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.#ctor(System.Drawing.Point,McKnight.Similization.Server.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.Worker"/> class.
            </summary>
            <param name="coordinates"></param>
            <param name="unitClone"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.DoTurn">
            <summary>
            Takes a turn for the worker.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.InvokeCurrentAction">
            <summary>
            Invokes the action currently on the top of the list for the worker.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Worker.Status">
            <summary>
            The current status of the worker.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.Irrigate">
            <summary>
            Attempts to irrigate the land.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.CleanPollution">
            <summary>
            Removes any pollution from the cell.  This can take several turns
            to complete.
            </summary>
            <returns><i>true</i> if the worker can clean the area, <i>false</i>
            otherwise (i.e. no pollution to clean)</returns>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.BuildRoad">
            <summary>
            Builds a road on the cell.
            </summary>
            <returns><i>true</i> if the worker can build a road on the cell,
            <i>false</i> otherwise (i.e. already has all the roads it can have)</returns>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.BuildRailroad">
            <summary>
            Builds a RailRoad on the cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.ClearJungle">
            <summary>
            Attempts to clear jungle from the land.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.JoinCity(McKnight.Similization.Server.City)">
            <summary>
            Joins to the city.
            </summary>
            <param name="city"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.Mine">
            <summary>
            Attempts to mine the area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.BuildRoadTo(System.Drawing.Point)">
            <summary>
            Builds a road to the specified coordinates on the grid..
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.CanBuildRailroad">
            <summary>
            Determines whether or not the <see cref="T:McKnight.Similization.Server.Worker"/> can build a railroad on the current
            square.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.CanBuildRoadTo(System.Drawing.Point)">
            <summary>
            Gets a value indicating whether or not the <see cref="T:McKnight.Similization.Server.Worker"/>
            can build a road to the specified coordinates.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="P:McKnight.Similization.Server.Worker.Automated">
            <summary>
            Gets a value indicating whether or not the worker is currently automated.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Worker.ParentCity">
            <summary>
            Gets or sets the city whose land the worker will improve.
            </summary>
            <remarks>When <i>null</i>, an automated worker will ask the <c>Country</c> 
            object to return the closest <see cref="T:McKnight.Similization.Server.City"/> that needs improvements to its' 
            land.  When non-null, the worker will make all possible improvements to the 
            cells within control of that city before moving on to a new city.</remarks>
        </member>
        <member name="P:McKnight.Similization.Server.Worker.WorkQueue">
            <summary>
            Gets the WorkQueue for the worker.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.Worker.CurrentAction">
            <summary>
            Gets the action currently being performed by the worker.  
            </summary>
            <remarks>This action will not always correspond to the current 
            status of the worker.  In some cases, the <c>CurrentAction</c> will 
            required the <see cref="T:McKnight.Similization.Server.Worker"/> to move some number of cells to get to 
            the <see cref="T:McKnight.Similization.Server.GridCell"/> that is to be improved.  This property can be used
            to determine the location and action that will be performed next by
            the <see cref="T:McKnight.Similization.Server.Worker"/>.</remarks>
        </member>
        <member name="M:McKnight.Similization.Server.Worker.FindCellToImprove">
            <summary>
            Searches the entire area within control of the country and finds the closest 
            and highest priority job for this worker.
            </summary>
            <returns>A <see cref="T:McKnight.Similization.Server.WorkerActionInfo"/> object with information regarding
            the location and type of work to perform.  For more inforation, see the
            <see cref="T:McKnight.Similization.Server.WorkerActionInfo"/> object.</returns>
        </member>
        <member name="T:McKnight.Similization.Server.WorkerActionInfo">
            <summary>
            A simple class containing properties related to a location and action
            for a job to perform by a Worker object.
            </summary>
        </member>
        <member name="M:McKnight.Similization.Server.WorkerActionInfo.#ctor(McKnight.Similization.Server.WorkerAction,McKnight.Similization.Server.GridCell)">
            <summary>
            Initializes a new instance of the <see cref="T:McKnight.Similization.Server.WorkerActionInfo"/> class..
            </summary>
            <param name="action"></param>
            <param name="cell"></param>
        </member>
        <member name="P:McKnight.Similization.Server.WorkerActionInfo.WorkerAction">
            <summary>
            Gets or sets the action to perform.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.WorkerActionInfo.GridCell">
            <summary>
            Gets or sets the location of the job.
            </summary>
        </member>
        <member name="P:McKnight.Similization.Server.WorkerActionInfo.Priority">
            <summary>
            Gets or sets the priority of the job.
            </summary>
        </member>
        <member name="T:McKnight.Similization.Core.Direction">
            <summary>
            Directions for the game.
            </summary>
        </member>
        <member name="F:McKnight.Similization.Core.Direction.North">
            <summary>
            North
            </summary>
        </member>
        <member name="F:McKnight.Similization.Core.Direction.South">
            <summary>
            south
            </summary>
        </member>
        <member name="F:McKnight.Similization.Core.Direction.East">
            <summary>
            East
            </summary>
        </member>
        <member name="F:McKnight.Similization.Core.Direction.West">
            <summary>
            West
            </summary>
        </member>
        <member name="F:McKnight.Similization.Core.Direction.Northeast">
            <summary>
            NorthEast
            </summary>
        </member>
        <member name="F:McKnight.Similization.Core.Direction.Northwest">
            <summary>
            NorthWest
            </summary>
        </member>
        <member name="F:McKnight.Similization.Core.Direction.Southeast">
            <summary>
            SouthEast
            </summary>
        </member>
        <member name="F:McKnight.Similization.Core.Direction.Southwest">
            <summary>
            SouthWest
            </summary>
        </member>
    </members>
</doc>
