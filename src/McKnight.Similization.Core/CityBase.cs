using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Drawing;
using System.Text;

namespace McKnight.Similization.Core
{
    /// <summary>
    /// Class representing a city in the game.
    /// </summary>
    public class CityBase : NamedObject
    {
        private int happyPeople;
        private int contentPeople;
        private int sadPeople;
        private int entertainers;
        private int scientists;
        private int taxCollectors;
        private int shields;
        private int cultureThreshold = 100;
        private int maxCitySize = 6;
        private int population;
        private int yearFounded;
        private bool isCapitol;
        private int pollution;
        private int culturePoints;
        private int borderFactor = 10;
        private int availableFood;
        private int radius;
        private Point coordinates;
        private CountryBase country;
        private CountryBase originalCountry;
        private CityStatus status;
        private BuildableItem nextImprovement;
        private CitySizeClass sizeClass;
        private NamedObjectCollection<Resource> availableResources;
        private Collection<Point> usedCells;
        private NamedObjectCollection<Improvement> improvements;
        private NamedObjectCollection<BuildableItem> buildableItems;
        private event EventHandler populationChanged;
        private event EventHandler radiusChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="CityBase"/> class.
        /// </summary>
        public CityBase()
        {
            this.population = 1;
            this.happyPeople = 1;
            this.sizeClass = CitySizeClass.Town;
            this.buildableItems = new NamedObjectCollection<BuildableItem>();
            this.availableResources = new NamedObjectCollection<Resource>();
            this.improvements = new NamedObjectCollection<Improvement>();
            this.usedCells = new Collection<Point>();                        
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CityBase"/> class.
        /// </summary>
        /// <param name="coordinates"></param>
        public CityBase(Point coordinates) : this()
        {            
            this.coordinates = coordinates;            
            this.usedCells.Add(coordinates);	
        }

        /// <summary>
        /// The list of resources available for this city to exploit.
        /// </summary>
        public NamedObjectCollection<Resource> AvailableResources
        {
            get { return this.availableResources; }
        }

        /// <summary>
        /// Gets the amount of gold the city must spend per turn 
        /// for the upkeep of its' improvements.
        /// </summary>
        public int MaintenanceCostPerTurn
        {
            get
            {
                int goldDelta = 0;
                //decrease money based on maintenance costs
                foreach (Improvement improvement in this.improvements)
                    goldDelta += improvement.MaintenanceCostPerTurn;
                return goldDelta;
            }
        }

        /// <summary>
        /// Gets the number of culture points per turn generated by this city.
        /// </summary>		
        public int CulturePerTurn
        {
            get
            {
                int points = 0;
                foreach (Improvement improvement in this.improvements)
                    points += improvement.CulturePerTurn;
                return points;
            }
        }

        /// <summary>
        /// Gets the next improvement for this city.  This is the improvement (or unit)
        /// that the city is currently building.
        /// </summary>
        public BuildableItem NextImprovement
        {
            get { return this.nextImprovement; }
            set
            {
                if (this.buildableItems.Contains(value))                
                    this.nextImprovement = value;                
                else
                    throw new InvalidOperationException(McKnight_Similization_Core.ImprovementNotAvailable);                
            }
        }

        /// <summary>
        /// Gets the number of happy peole in the city.
        /// </summary>
        public int HappyPeople
        {
            get { return this.happyPeople; }
            set { this.happyPeople = value; }
        }

        /// <summary>
        /// Gets the number of content people in the city.
        /// </summary>
        public int ContentPeople
        {
            get { return this.contentPeople; }
            set { this.contentPeople = value; }
        }

        /// <summary>
        /// Gets the number of sad people in the city.
        /// </summary>
        public int SadPeople
        {
            get { return this.sadPeople; }
            set { this.sadPeople = value; }
        }

        /// <summary>
        /// Gets the number of entertainers in the city.
        /// </summary>
        public int Entertainers
        {
            get { return this.entertainers; }
            set { this.entertainers = value; }
        }

        /// <summary>
        /// Gets the number of scientists in the city.
        /// </summary>
        public int Scientists
        {
            get { return this.scientists; }
            set { this.scientists = value; }
        }

        /// <summary>
        /// Gets the number of tax collectors in the city.
        /// </summary>
        public int TaxCollectors
        {
            get { return this.taxCollectors; }
            set { this.taxCollectors = value; }
        }

        /// <summary>
        /// Gets the number of shields the city has produced.
        /// </summary>
        public int Shields
        {
            get { return this.shields; }
            set { this.shields = value; }
        }

        /// <summary>
        /// Gets the number of culture points required before the city will
        /// have its' cultural influence expand.
        /// </summary>
        public int CultureThreshold
        {
            get { return this.cultureThreshold; }
            set { this.cultureThreshold = value; }
        }

        /// <summary>
        /// Gets the maximum size of the city.  This value can change, depending 
        /// on the improvements in the city.  Some improvements allow the city
        /// to grow to a larger size.
        /// </summary>
        public int MaxCitySize
        {
            get { return this.maxCitySize; }
            set { this.maxCitySize = value; }
        }
        
        /// <summary>
        /// Gets or sets the population of the city.
        /// </summary>
        public int Population
        {
            get { return this.population; }
            set
            {
                if (this.population != value)
                {
                    this.population = value;
                    OnPopulationChanged();
                }
            }
        }

        /// <summary>
        /// Gets the <see cref="CitySizeClass"/> for the city.
        /// </summary>
        public CitySizeClass SizeClass
        {
            get { return this.sizeClass; }
            set { this.sizeClass = value; }
        }

        /// <summary>
        /// Gets or sets the year that this city was founded.
        /// </summary>
        public int YearFounded
        {
            get { return this.yearFounded; }
            set { this.yearFounded = value; }
        }

        /// <summary>
        /// Gets or sets a value indicating if the city is the capitol 
        /// of the country.
        /// </summary>
        public bool IsCapitol
        {
            get { return this.isCapitol; }
            set { this.isCapitol = value; }
        }

        /// <summary>
        /// Gets or sets the amount of pollution that the city creates.
        /// </summary>
        public int Pollution
        {
            get { return this.pollution; }
            set { this.pollution = value; }
        }

        /// <summary>
        /// Gets or sets the number of culture points for the city.
        /// </summary>
        public int CulturePoints
        {
            get { return this.culturePoints; }
            set { this.culturePoints = value; }
        }

        /// <summary>
        /// Gets or sets the Border Factor of the city.  The border factor
        /// is the rate at which the borders expand due to culture increases.
        /// </summary>
        public int BorderFactor
        {
            get { return this.borderFactor; }
            set { this.borderFactor = value; }
        }

        /// <summary>
        /// Gets a list of cells currently being used by the city.
        /// </summary>
        public Collection<Point> UsedCells
        {
            get { return this.usedCells; }
        }

        /// <summary>
        /// Gets a list of improvement that the city has built.
        /// </summary>
        public NamedObjectCollection<Improvement> Improvements
        {
            get { return this.improvements; }
        }

        /// <summary>
        /// Gets a list of Buildable items that the city can produce at
        /// the current time.  This list will exclude improvements that
        /// have already been built.
        /// </summary>
        public NamedObjectCollection<BuildableItem> BuildableItems
        {
            get { return this.buildableItems; }
        }

        /// <summary>
        /// Gets the amount of food in storage in the city.
        /// </summary>
        public int AvailableFood
        {
            get { return this.availableFood; }
            set { this.availableFood = value; }
        }

        /// <summary>
        /// Gets or sets the parent country of the city.
        /// </summary>
        public CountryBase ParentCountry
        {
            get { return this.country; }
            set
            {
                this.country = value;
                if (this.originalCountry == null)
                    this.originalCountry = value;
            }
        }

        /// <summary>
        /// The first <see cref="Country"/> to own this city.
        /// </summary>
        /// <remarks>For cities that have been captured, or switched because 
        /// of culture, this property will reflect the previous <see cref="Country"/>.  
        /// For cities that have never been invaded or culture-flipped, this property 
        /// will return the same value as the <i>ParentCountry</i> property.</remarks>
        public CountryBase OriginalParentCountry
        {
            get { return this.originalCountry; }
        }

        /// <summary>
        /// Gets the current status of the city.
        /// </summary>
        public CityStatus Status
        {
            get { return this.status; }
            set { this.status = value; }
        }

        /// <summary>
        /// Gets the coordinates of the <see cref="CityBase"/> on the grid.
        /// </summary>
        public Point Coordinates
        {
            get { return this.coordinates; }
            set
            {
                if (this.coordinates == Point.Empty)
                    this.coordinates = value;
            }
        }

        /// <summary>
        /// The radius of the <see cref="CityBase"/>.
        /// </summary>
        /// <remarks>The <i>Radius</i> property indicates the area that 
        /// is under control of the <see cref="CityBase"/>.  Cells within 
        /// that area can be irrigated or otherwise used by the population.</remarks>
        public int Radius
        {
            get { return this.radius; }
            set
            {
                if (this.radius != value)
                {
                    SetCityRadius(value);
                    OnRadiusChanged();
                }
            }
        }

        /// <summary>
        /// Event that fires whenever the population of the city changes.
        /// </summary>
        public event EventHandler PopulationChanged
        {
            add
            {
                this.populationChanged += value;
            }

            remove
            {
                this.populationChanged -= value;
            }
        }

        /// <summary>
        /// Occurs when the the <i>Radius</i> property changes.
        /// </summary>
        public event EventHandler RadiusChanged
        {
            add
            {
                this.radiusChanged += value;
            }

            remove
            {
                this.radiusChanged -= value;
            }
        }

        /// <summary>
        /// Fires the <i>PopulationChanged</i> event.
        /// </summary>
        protected virtual void OnPopulationChanged()
        {
            if (this.populationChanged != null)            
                this.populationChanged(this, EventArgs.Empty);            
        }

        /// <summary>
        /// Fires the <i>RadiusChanged</i> event.
        /// </summary>
        protected virtual void OnRadiusChanged()
        {
            if (this.radiusChanged != null)            
                this.radiusChanged(this, null);            
        }

        /// <summary>
        /// Adds the requested cell to the list of cells being worked by the people in the city.
        /// </summary>
        /// <remarks>
        /// This will increase the output of the city, but it will also remove an entertainer,
        /// tax collector, other city specialist.
        /// </remarks>
        /// <param name="cellCoordinates"></param>
        public void AddWorkedCell(Point cellCoordinates)
        {
            if (this.usedCells.Count >= this.population)
                return;

            this.usedCells.Add(cellCoordinates);
            if (this.entertainers > 0)
            {
                this.entertainers--;
                this.contentPeople += 2;
                if (this.happyPeople > 0)
                    this.happyPeople--;
                else if (this.contentPeople > 0)
                    this.contentPeople--;
            }
            else if (this.taxCollectors > 0)
                this.taxCollectors--;
            else if (this.scientists > 0)
                this.scientists--;
        }

        /// <summary>
        /// Removes the requested cell from the list of cells being worked by the city.
        /// </summary>
        /// <param name="coordinates"></param>
        /// <remarks>When this method is called, the cell will no longer be worked, and 
        /// a new city specialist will begin working for the city.  This could be a 
        /// scientist, entertainer, or tax collector.</remarks>
        public void RemoveWorkedCell(Point coordinates)
        {
            if (!this.usedCells.Contains(coordinates))
                throw new InvalidOperationException(McKnight_Similization_Core.CellIsNotBeingWorked);
            else if (coordinates == this.coordinates)
                return;	//cannot remove the worker from the city center.

            this.usedCells.Remove(coordinates);
            this.entertainers++;
            this.happyPeople++;

            if (this.sadPeople > 1)
                this.sadPeople -= 2;
            else if ((this.sadPeople == 1) && (this.contentPeople >= 1))
            {
                this.sadPeople--;
                this.contentPeople--;
            }
            else if ((this.sadPeople == 1) && (this.contentPeople == 0) && (this.happyPeople > 0))
            {
                this.sadPeople--;
                this.happyPeople--;
            }
            else if (this.contentPeople > 1)
            {
                this.contentPeople -= 2;
            }
            else if ((this.contentPeople == 1) && (this.sadPeople == 0) && (this.happyPeople > 0))
            {
                this.contentPeople--;
                this.happyPeople--;
            }
            else
            {
                throw new InvalidOperationException(McKnight_Similization_Core.CannotDetermineHappiness);
            }

        }

        /// <summary>
        /// Rebuilds the list of "worked" cells.  
        /// </summary>
        protected void RefreshUsedCells()
        {
            int cellsToAdd = 0;
            int cellsToRemove = 0;
            cellsToAdd = this.population - (this.usedCells.Count - 1);
            if (cellsToAdd < 0)
                cellsToRemove = Math.Abs(cellsToAdd);

            if (cellsToAdd == 0 && cellsToRemove == 0)
                return;

            if (cellsToAdd > 0)
            {
                // Add some new "worked" cells
                Point worked;
                for (int i = 0; i < cellsToAdd; i++)
                {
                    worked = FindLocationToWork();
                    if (worked != Point.Empty)
                        this.usedCells.Add(worked);
                }
            }
            else
            {
                // Remove some "worked" cells.                
                for (int i = 0; i < cellsToRemove; i++)
                    this.usedCells.RemoveAt(this.usedCells.Count - 1);                
            }
        }

        /// <summary>
        /// Gets a Point object that can be worked.  This means
        /// that the cell is currently unworked, and within the city radius.
        /// </summary>
        /// <returns></returns>
        protected Point FindLocationToWork()
        {
            if (!this.usedCells.Contains(this.coordinates))
                return this.coordinates;

            Point candidate = new Point(this.coordinates.X - 1, this.coordinates.Y);
            Point[] candidates = GetCellsInCityRadius();
            int idx = 0;
            do
            {
                candidate = candidates[idx++];
            } while (this.usedCells.Contains(candidate) && candidate != this.coordinates);

            return candidate;
        }

        /// <summary>
        /// Returns an array of <i>Point</i> structures representing 
        /// the coordinates of the <see cref="GridCell"/> objects 
        /// in the city radius.
        /// </summary>
        /// <returns></returns>
        public Point[] GetCellsInCityRadius()
        {
            Point topLeft = this.coordinates;
            topLeft.Offset(this.radius, this.radius);
            int cellsRight = (this.radius * 2) + 1;
            int cellsDown = (this.radius * 2) + 1;

            Point[] coordsInRadius = new Point[cellsRight * cellsDown];
            for (int i = 0; i <= cellsRight; i++)
                for (int j = 0; j <= cellsDown; j++)
                    coordsInRadius[i + j] = new Point(topLeft.X + i, topLeft.Y + j);
            return coordsInRadius;
        }

        private void SetCityRadius(int radius)
        {
            this.radius = radius;
            Point topLeft = new Point(this.coordinates.X - radius, this.coordinates.Y - radius);
            
            int dx = (radius * 2) + 1;
            int dy = (radius * 2) + 1;

            for (int x = 0; x < dx; x++)
                for (int y = 0; y < dy; y++)
                    AddCoordinatesToCityRadius(new Point(topLeft.X + x, topLeft.Y + y));           
        }

        /// <summary>
        /// Adds the specified coorindates to the radius of the city.
        /// </summary>
        /// <param name="coordinates"></param>
        protected virtual void AddCoordinatesToCityRadius(Point coordinates) { }

        /// <summary>
        /// Sets the initial radius of the <see cref="City"/>.
        /// </summary>
        /// <param name="radius"></param>
        protected void InitializeCityRadius(int radius)
        {
            if (this.Radius != 0)
                throw new InvalidOperationException();
            SetCityRadius(radius);
        }
    }
}
