<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
            Microsoft ResX Schema 
        
            Version 1.3
                
            The primary goals of this format is to allow a simple XML format 
            that is mostly human readable. The generation and parsing of the 
            various data types are done through the TypeConverter classes 
            associated with the data types.
        
            Example:
        
                ... ado.net/XML headers & schema ...
                <resheader name="resmimetype">text/microsoft-resx</resheader>
                <resheader name="version">1.3</resheader>
                <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
                <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
                <data name="Name1">this is my long string</data>
                <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
                <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
                    [base64 mime encoded serialized .NET Framework object]
                </data>
                <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
                    [base64 mime encoded string representing a byte array form of the .NET Framework object]
                </data>
        
            There are any number of "resheader" rows that contain simple 
            name/value pairs.
            
            Each data row contains a name, and value. The row also contains a 
            type or mimetype. Type corresponds to a .NET class that support 
            text/value conversion through the TypeConverter architecture. 
            Classes that don't support this are serialized and stored with the 
            mimetype set.
                     
            The mimetype is used for serialized objects, and tells the 
            ResXResourceReader how to depersist the object. This is currently not 
            extensible. For a given mimetype the value must be set accordingly:
        
            Note - application/x-microsoft.net.object.binary.base64 is the format 
                   that the ResXResourceWriter will generate, however the reader can 
                   read any of the formats listed below.
        
            mimetype: application/x-microsoft.net.object.binary.base64
            value   : The object must be serialized with 
                    : System.Serialization.Formatters.Binary.BinaryFormatter
                    : and then encoded with base64 encoding.
        
            mimetype: application/x-microsoft.net.object.soap.base64
            value   : The object must be serialized with 
                    : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
                    : and then encoded with base64 encoding.
            mimetype: application/x-microsoft.net.object.bytearray.base64
            value   : The object must be serialized into a byte array 
                    : using a System.ComponentModel.TypeConverter
                    : and then encoded with base64 encoding.
        -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="gameTitle">
    <value>Similization</value>
  </data>
  <data name="gameStart">
    <value>It is the year 4000 BC. Your ancestors were nomads. But over the generations your people have learned the secrets of farming, road-building, and irrigation, and they are ready to settle down.

{0}, your people are {1} and {2} and have recently mastered {3}.
The people have vested absolute power in you, trusting that you can build a Civilization to stand the test of time!</value>
  </data>
  <data name="serverStartup">
    <value>Starting the server...</value>
  </data>
  <data name="ServerStartupComplete">
    <value>Sucessfully started the server.</value>
  </data>
  <data name="playerRegistered">
    <value>{0} has joined the game, representing the civilization of the {1}.</value>
  </data>
  <data name="expansionistAttribute">
    <value>expansionist</value>
  </data>
  <data name="militaristicAttribute">
    <value>militaristic</value>
  </data>
  <data name="religiousAttribute">
    <value>religious</value>
  </data>
  <data name="industriousAttribute">
    <value>industrious</value>
  </data>
  <data name="scientificAttribute">
    <value>scientific</value>
  </data>
  <data name="commercialAttribute">
    <value>commercial</value>
  </data>
  <data name="unitCaptured">
    <value>Our {0} was captured!</value>
  </data>
  <data name="unitDestroyed">
    <value>Our {0} has been destroyed!</value>
  </data>
  <data name="cityInvaded">
    <value>Sir, Forces have captured the city of {0}.  {1} gold has been plundered.</value>
  </data>
  <data name="cityLostToInvasion">
    <value>Terrible news, {0}!
^{1} was captured by the evil {2}!
They have stolen {3} gold from its vaults.
</value>
  </data>
  <data name="playerDestroysFoe">
    <value>We have destroyed the {0} {1}, {2}.</value>
  </data>
  <data name="foreignCivDestroyed">
    <value>{0}, the {1} {2} were destroyed by {3} forces.</value>
  </data>
  <data name="playerDefeated">
    <value>Our civilization has been destroyed by the {1} forces!</value>
  </data>
  <data name="culturalInflueceExpanded">
    <value>Our cultural influence is expanding!</value>
  </data>
  <data name="cityDisorder">
    <value>Civlil Disorder in {0}.</value>
  </data>
  <data name="orderRestored">
    <value>Order restored in {0}.</value>
  </data>
  <data name="cannotGrow">
    <value>Sir, {0} cannot grow beyond its' current size of {1} without first building a {2}.</value>
  </data>
  <data name="improvementBuilt">
    <value>Sir, the city of {0} has produced a {1}.</value>
  </data>
  <data name="techResearchNeeded">
    <value>{0}, our {1} need guidance. What shall we research?</value>
  </data>
  <data name="technologyAcquired">
    <value>{0}, our {1} have mastered the secret of {2}.</value>
  </data>
  <data name="starved">
    <value>Starvation in {0}!</value>
  </data>
  <data name="villageUnit">
    <value>This friendly {0} village gave us a skilled {1}.</value>
  </data>
  <data name="villageBarbarian">
    <value>We have disturbed an angry {0} {1}.</value>
  </data>
  <data name="villageMap">
    <value>The friendly {0} tribe gave us maps of their region.</value>
  </data>
  <data name="villageGold">
    <value>We got {0} gold from the {1} tribe's village.</value>
  </data>
  <data name="villageCity">
    <value>An advanced {0} village has joined us!</value>
  </data>
  <data name="villageDeserted">
    <value>This {0} village is deserted.</value>
  </data>
  <data name="villageSettler">
    <value>A friendly {0} {1} wants to join our {2}.</value>
  </data>
  <data name="villageTechnology">
    <value>The {0} tribe has taught us {1}.</value>
  </data>
  <data name="militaryVictory">
    <value>{0}, {1} has destoryed all other civilizations.  You have won a military victory!</value>
  </data>
</root>